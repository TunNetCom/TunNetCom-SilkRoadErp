@page "/manage-invoice"
@using Microsoft.Extensions.Localization
@using Radzen.Blazor
@using Radzen
@using System.Globalization
@using TunNetCom.SilkRoadErp.Sales.Contracts.Customers
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Requests
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Responses
@using TunNetCom.SilkRoadErp.Sales.Contracts.Invoice
@using TunNetCom.SilkRoadErp.Sales.Contracts.Sorting
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Customers
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.DeliveryNote
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Invoices
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using TunNetCom.SilkRoadErp.Sales.WebApp.Helpers
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine.Reports.Invoices.PrintInvoiceWithDetails
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine.Reports.Invoices.RetenueSource


@inject ICustomersApiClient customerService
@inject IInvoicesApiClient invoicesService
@inject IDeliveryNoteApiClient deliveryNoteService
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> Localizer
@inject ToastService toastService
@inject NotificationService NotificationService
@inject PrintRetenuSourceService PrintRetenuSourceService
@inject PrintFullInvoiceService PrintFullInvoiceService
@inject IJSRuntime JS

<div>
    <h3>@Localizer["manage_invoices"]</h3>
    <RadzenRow class="rz-navbar" Gap="1rem" Style="background-color: #f8f9fa; padding: 1rem; border-bottom: 1px solid #dee2e6;">
        <RadzenColumn Size="6">
            <RadzenStack Orientation="Radzen.Orientation.Horizontal"
            Gap="1.5rem"
            AlignItems="AlignItems.Start"
            JustifyContent="JustifyContent.Left"
            Style="width: 100%;">

                <!-- Wider Customer Dropdown (350px) -->
                <RadzenDropDownDataGrid AllowClear="true"
                IsLoading=@isLoadingCustomers
                @bind-Value="@SelectedCustomerId"
                LoadData="@LoadCustomers"
                AllowFiltering="true"
                Style="width: 350px;"
                Data="@_filteredCustomers"
                TextProperty="@nameof(CustomerResponse.Nom)"
                ValueProperty="@nameof(CustomerResponse.Id)"
                Placeholder="@Localizer["select_customer"]">
                    <Columns>
                        <RadzenDropDownDataGridColumn Property="@nameof(CustomerResponse.Id)" Title="ID" Width="80px" />
                        <RadzenDropDownDataGridColumn Property="@nameof(CustomerResponse.Nom)" Title="Name" Width="220px" />
                    </Columns>
                </RadzenDropDownDataGrid>

                <!-- Expanded Buttons (now with fixed width) -->
                <RadzenButton ButtonStyle="ButtonStyle.Primary"
                Click="@PrintRetenuSourceClick"
                Style="min-width: 160px; padding: 0 1rem;">
                    <RadzenIcon Icon="print" Style="margin-right: 8px;" />
                    <span>Print Retenu</span>
                </RadzenButton>

                <RadzenButton ButtonStyle="ButtonStyle.Primary"
                Click="@PrintInvoiceClick"
                Style="min-width: 160px; padding: 0 1rem;">
                    <RadzenIcon Icon="print" Style="margin-right: 8px;" />
                    <span>Print Invoice</span>
                </RadzenButton>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Gap="1rem" Style="width:fit-content">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenDataGrid ColumnWidth="200px"
            @ref="InvoiceGrid"
            AllowFiltering="true"
            AllowPaging="true"
            Page="@OnPage"
            PageSize="_defaultPageSize"
            PagerHorizontalAlign="HorizontalAlign.Left"
            ShowPagingSummary="true"
            AllowSorting="true"
            Count="@getInvoiceListWithSummary.Invoices.TotalCount"
            Data="@getInvoiceListWithSummary.Invoices.Items"
            LoadData="@LoadInvoiceData"
            @bind-Value="@SelectedInvoice"
            IsLoading=@isLoadingInvoices
            SelectionMode="DataGridSelectionMode.Single">
                <HeaderTemplate>
                    <div style="padding: 6px; font-size: 16px; font-weight: bold;">
                        @Localizer["customer_invoice_details"]
                    </div>
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Property="Num" Title="@Localizer["invoice_number"]" Width="120px" />
                    <RadzenDataGridColumn Property="Date" Title="@Localizer["date"]" FormatString="{0:d}" Width="140px" />
                    <RadzenDataGridColumn Property="TotTTC" Title="@Localizer["total_incl_tax"]" Width="100px">
                        <Template Context="detail">
                            @detail.TotTTC.FormatAmount()
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <RadzenCard Variant="Variant.Outlined" Style="margin-bottom: 1rem;">
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="2rem" JustifyContent="JustifyContent.End">
                    <RadzenText TextStyle="TextStyle.Button">
                        @Localizer["total_net"]: <strong>@getInvoiceListWithSummary.TotalNetAmount.FormatAmount()</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Button">
                        @Localizer["total_gross"]: <strong>@getInvoiceListWithSummary.TotalGrossAmount.FormatAmount()</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Button">
                        @Localizer["total_vat"]: <strong>@getInvoiceListWithSummary.TotalVATAmount.FormatAmount()</strong>
                    </RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>

        <RadzenColumn Size="12" SizeMD="6">
            <RadzenCard Variant="Variant.Outlined" Style="height: 100%;">
                <RadzenStack Gap="1rem">
                    <RadzenTabs>
                        <Tabs>
                            <RadzenTabsItem Text="@Localizer["delivery_notes_details"]">
                                <RadzenColumn>
                                    <RadzenDataGrid @ref="_grid"
                                    AllowRowSelectOnRowClick="true"
                                    AllowFiltering="true"
                                    FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowPaging="true"
                                    Page="@OnPage"
                                    PageSize="_defaultPageSize"
                                    PagerHorizontalAlign="HorizontalAlign.Left"
                                    ShowPagingSummary="true"
                                    Count="_getDeliveryNotesWithSummariesResponse.GetDeliveryNoteBaseInfos.TotalCount"
                                    AllowSorting="true"
                                    GotoFirstPageOnSort="true"
                                    TItem="GetDeliveryNoteBaseInfos"
                                    Data="@_getDeliveryNotesWithSummariesResponse.GetDeliveryNoteBaseInfos.Items"
                                    LoadData="@LoadInvoicedDeliveryNoteData"
                                    ColumnWidth="200px"
                                    SelectionMode="DataGridSelectionMode.Multiple"
                                    IsLoading=@isLoadingDeliveryNotesInCurrentInvoice
                                    @bind-Value="@_selectedDeliveryNotesToDetach">
                                        <Columns>
                                            <RadzenDataGridColumn Property="Num" Title="@Localizer["number"]" />
                                            <RadzenDataGridColumn Property="GrossAmount" Title="@Localizer["total_ex_tax"]">
                                                <Template Context="detail">
                                                    @detail.GrossAmount.FormatAmount()
                                                </Template>
                                            </RadzenDataGridColumn>
                                            <RadzenDataGridColumn Property="NetAmount" Title="@Localizer["net_payer"]">
                                                <Template Context="detail">
                                                    @detail.NetAmount.FormatAmount()
                                                </Template>
                                            </RadzenDataGridColumn>
                                        </Columns>
                                    </RadzenDataGrid>
                                    <RadzenCard Variant="Variant.Outlined" Style="margin-bottom: 1rem;">
                                        <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="2rem" JustifyContent="JustifyContent.End">
                                            <RadzenText TextStyle="TextStyle.Button">
                                                @Localizer["total_net"]: <strong>@_getDeliveryNotesWithSummariesResponse?.TotalNetAmount.FormatAmount()</strong>
                                            </RadzenText>
                                            <RadzenText TextStyle="TextStyle.Button">
                                                @Localizer["total_gross"]: <strong>@_getDeliveryNotesWithSummariesResponse?.TotalGrossAmount.FormatAmount()</strong>
                                            </RadzenText>
                                            <RadzenText TextStyle="TextStyle.Button">
                                                @Localizer["total_vat"]: <strong>@_getDeliveryNotesWithSummariesResponse?.TotalVatAmount.FormatAmount()</strong>
                                            </RadzenText>
                                        </RadzenStack>
                                    </RadzenCard>
                                </RadzenColumn>
                            </RadzenTabsItem>
                        </Tabs>
                    </RadzenTabs>
                    <RadzenButton Text="@Localizer["detach_from_invoice"]"
                    Click="@DetachDeliveryNotesFromInvoice"
                    Disabled="@(SelectedInvoiceId == 0 || !_selectedDeliveryNotesToDetach.Any())" />

                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn>
            <RadzenDataGrid @ref="_grid"
            AllowRowSelectOnRowClick="true"
            AllowFiltering="true"
            FilterPopupRenderMode="PopupRenderMode.OnDemand"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
            AllowPaging="true"
            PagerHorizontalAlign="HorizontalAlign.Left"
            ShowPagingSummary="true"
            PageSize="_defaultPageSize"
            Count="@_uninvoicedDeliveryNotesSummary.GetDeliveryNoteBaseInfos.TotalCount"
            AllowSorting="true"
            Data="@_uninvoicedDeliveryNotesSummary.GetDeliveryNoteBaseInfos.Items"
            LoadData="LoadUninvoicedDeliveryNotesData"
            IsLoading=@isLoadingUninvoicedDeliveryNotes
            ColumnWidth="200px"
            SelectionMode="DataGridSelectionMode.Multiple"
            @bind-Value="@_selectedDeliveryNotesToAttach">
                <HeaderTemplate>
                    <div style="padding: 6px; font-size: 16px; font-weight: bold;">
                        @Localizer["uninvoiced_delivery_notes_details"]
                    </div>
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Property="Num" Title="@Localizer["number"]" />
                    <RadzenDataGridColumn Property="NetAmount" Title="@Localizer["total_ex_tax"]" FormatString="{0:N2}">
                        <Template Context="detail">
                            @detail.NetAmount.FormatAmount()
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="GrossAmount" Title="@Localizer["net_payer"]" FormatString="{0:N2}">
                        <Template Context="detail">
                            @detail.GrossAmount.FormatAmount()
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>
            <RadzenCard Variant="Variant.Outlined" Style="margin-bottom: 1rem;">
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="2rem" JustifyContent="JustifyContent.End">
                    <RadzenText TextStyle="TextStyle.Subtitle1">
                        @Localizer["total_net"]: <strong>@_uninvoicedDeliveryNotesSummary?.TotalNetAmount.FormatAmount()</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle1">
                        @Localizer["total_gross"]: <strong>@_uninvoicedDeliveryNotesSummary?.TotalGrossAmount.FormatAmount()</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle1">
                        @Localizer["total_vat"]: <strong>@_uninvoicedDeliveryNotesSummary?.TotalVatAmount.FormatAmount()</strong>
                    </RadzenText>
                </RadzenStack>
            </RadzenCard>
            <RadzenButton Click=@(args => AttachDeliveryNoteToInvoiceClick("Primary button"))
            Text=@Localizer["attach_delivery_note_to_invoice"] ButtonStyle="ButtonStyle.Primary" />
        </RadzenColumn>
    </RadzenRow>

</div>

@code {
    #region Fields and Properties
    private const int _defaultPageSize = 5;
    private int _selectedCustomerId;
    private int SelectedCustomerId
    {
        get => _selectedCustomerId;
        set
        {
            if (_selectedCustomerId != value)
            {
                _selectedCustomerId = value;
                SelectedInvoiceId = 0;
                SelectedInvoice = new List<InvoiceResponse>();
                getInvoiceListWithSummary = new GetInvoiceListWithSummary();
                _uninvoicedDeliveryNotes = new List<GetDeliveryNoteBaseInfos>();
                _uninvoicedDeliveryNotesSummary = new GetDeliveryNotesWithSummariesResponse();
                _getDeliveryNotesWithSummariesResponse = new GetDeliveryNotesWithSummariesResponse();
                if (value > 0)
                {
                    _ = LoadInvoicesForCustomers();
                    _ = LoadUninvoicedDeliveryNotes(value);
                }
            }
        }
    }
    private int _selectedInvoiceId;
    private int SelectedInvoiceId
    {
        get => _selectedInvoiceId;
        set
        {
            if (_selectedInvoiceId != value)
            {
                _selectedInvoiceId = value;
                _ = LoadInvoicesForCustomers();
                _ = LoadDeliveryNotesForSelectedInvoice(value);
            }
        }
    }
    private IList<InvoiceResponse> _selectedInvoices = new List<InvoiceResponse>();
    private IList<InvoiceResponse> SelectedInvoice
    {
        get => _selectedInvoices;
        set
        {
            _selectedInvoices = value;
            var selectedInvoice = _selectedInvoices?.FirstOrDefault();
            _ = LoadDeliveryNotesForSelectedInvoice(selectedInvoice?.Num ?? 0);
        }
    }

    bool isLoadingCustomers = false;
    bool isLoadingInvoices = false;
    bool isLoadingDeliveryNotesInCurrentInvoice = false;
    bool isLoadingUninvoicedDeliveryNotes = false;
    private List<CustomerResponse> _filteredCustomers { get; set; } = new();
    private GetInvoiceListWithSummary getInvoiceListWithSummary { get; set; } = new GetInvoiceListWithSummary();
    private IList<GetDeliveryNoteBaseInfos> _selectedDeliveryNoteIdsToDetach = new List<GetDeliveryNoteBaseInfos>();
    private IList<GetDeliveryNoteBaseInfos> _uninvoicedDeliveryNotes { get; set; } = new List<GetDeliveryNoteBaseInfos>();
    private IList<GetDeliveryNoteBaseInfos> _selectedDeliveryNotesToAttach { get; set; } = new List<GetDeliveryNoteBaseInfos>();
    private CancellationTokenSource _cancellationTokenSource = new();
    private RadzenDataGrid<GetDeliveryNoteBaseInfos> _grid;
    private RadzenDataGrid<InvoiceResponse> InvoiceGrid;
    private GetDeliveryNotesWithSummariesResponse _uninvoicedDeliveryNotesSummary = new GetDeliveryNotesWithSummariesResponse();
    private GetDeliveryNotesWithSummariesResponse _getDeliveryNotesWithSummariesResponse = new GetDeliveryNotesWithSummariesResponse();
    private IList<GetDeliveryNoteBaseInfos> _selectedDeliveryNotesToDetach
    {
        get => _selectedDeliveryNoteIdsToDetach;
        set => _selectedDeliveryNoteIdsToDetach = value;
    }
    #endregion

    #region Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await SearchClients();
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
    #endregion

    #region Data Loading Methods
    private async Task LoadCustomers(LoadDataArgs args)
    {
        isLoadingCustomers = true;
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = 10,
            SearchKeyword = args.Filter
        };

        try
        {
            var pagedCustomers = await customerService.GetAsync(parameters, _cancellationTokenSource.Token);
            _filteredCustomers = pagedCustomers.Items;
        }

        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load customers: {ex.Message}"
            });
            _filteredCustomers = new List<CustomerResponse>();
        }

        isLoadingCustomers = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SearchClients()
    {
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = _defaultPageSize,
            SearchKeyword = null
        };

        _filteredCustomers = (await customerService.GetAsync(parameters, _cancellationTokenSource.Token)).Items;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadDeliveryNotesForSelectedInvoice(int invoiceNum)
    {
        SelectedInvoiceId = invoiceNum;
        _getDeliveryNotesWithSummariesResponse = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
                customerId: SelectedCustomerId,
                invoiceId: SelectedInvoiceId,
                isInvoiced: true,
                sortOrder: null,
                sortProperty: null,
                pageNumber: 1,
                pageSize: _defaultPageSize,
                cancellationToken: _cancellationTokenSource.Token
            );

        //TODO manage the case when no delivery notes are found
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadInvoicesForCustomers()
    {
        var parameters = new QueryStringParameters
        {
            //TODO remove magic numbers
            PageNumber = 1,
            PageSize = _defaultPageSize,
            SearchKeyword = null
        };

        if (SelectedCustomerId <= 0)
        {
            getInvoiceListWithSummary = new GetInvoiceListWithSummary();
            await InvokeAsync(StateHasChanged);
            return;
        }

        var result = await invoicesService.GetInvoicesByCustomerIdWithSummary(SelectedCustomerId, parameters, _cancellationTokenSource.Token);
        if (result.IsT0)
        {
            getInvoiceListWithSummary = result.AsT0;
        }

        if (result.IsT1)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = result.AsT1.Detail
            });
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadUninvoicedDeliveryNotes(int selectedCustomerId)
    {
        SelectedCustomerId = selectedCustomerId;

        try
        {
            _uninvoicedDeliveryNotesSummary = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
                customerId: SelectedCustomerId,
                invoiceId: null,
                isInvoiced: false,
                sortOrder: null,
                sortProperty: null,
                pageNumber: 1,
                pageSize: _defaultPageSize,
                cancellationToken: _cancellationTokenSource.Token
            );
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load uninvoiced delivery notes: {ex.Message}"
            });
            _uninvoicedDeliveryNotes = new List<GetDeliveryNoteBaseInfos>();
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task OnSort(DataGridColumnSortEventArgs<GetDeliveryNoteBaseInfos> args)
    {
        var columnName = args.Column.Property;
        var sortOrder = args.SortOrder;
        await FetchSortedDeliveryNotesAsync(columnName, sortOrder.ToString());
    }

    private async Task FetchSortedDeliveryNotesAsync(string columnName, string sortOrder)
    {
        _getDeliveryNotesWithSummariesResponse = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
            customerId: SelectedCustomerId,
            invoiceId: SelectedInvoiceId,
            isInvoiced: true,
            pageNumber: 1,
            pageSize: _defaultPageSize,
            sortOrder: sortOrder,
            sortProperty: columnName,
            cancellationToken: _cancellationTokenSource.Token
        );
    }

    private async Task AttachDeliveryNoteToInvoiceClick(string text)
    {
        if (SelectedInvoiceId > 0 && _selectedDeliveryNotesToAttach?.Any() == true)
        {
            var deliveryNoteIds = _selectedDeliveryNotesToAttach.Select(dn => dn.Num).ToList();
            var attachToInvoiceRequest = new AttachToInvoiceRequest
            {
                InvoiceId = SelectedInvoiceId,
                DeliveryNoteIds = deliveryNoteIds
            };

            var result = await deliveryNoteService.AttachToInvoiceAsync(attachToInvoiceRequest, default);

            if (result)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = Localizer["success"],
                    Detail = Localizer["delivery_notes_attached"]
                });

                _selectedDeliveryNotesToAttach = new List<GetDeliveryNoteBaseInfos>();

                await LoadInvoicesForCustomers();
                await LoadDeliveryNotesForSelectedInvoice(SelectedInvoiceId);
                await LoadUninvoicedDeliveryNotes(_selectedCustomerId);

            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["error"]
                });
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = Localizer["warning"],
                Detail = Localizer["select_invoice_and_delivery_notes"]
            });
        }
    }

    private async Task DetachDeliveryNotesFromInvoice()
    {
        try
        {
            var deliveryNoteIds = _selectedDeliveryNotesToDetach.Select(dn => dn.Num).ToList();
            var request = new DetachFromInvoiceRequest
            {
                InvoiceId = SelectedInvoiceId,
                DeliveryNoteIds = deliveryNoteIds
            };

            var result = await deliveryNoteService.DetachFromInvoiceAsync(request, _cancellationTokenSource.Token);

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = Localizer["success"],
                Detail = Localizer["delivery_notes_detached"]
            });
            await LoadInvoicesForCustomers();
            await LoadUninvoicedDeliveryNotes(_selectedCustomerId);
            await LoadDeliveryNotesForSelectedInvoice(_selectedInvoiceId);

            _selectedDeliveryNotesToDetach = new List<GetDeliveryNoteBaseInfos>();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = ex.Message
            });
            Console.WriteLine($"Error detaching delivery notes from invoice: {ex.Message}");
        }
    }

    void OnPage(PagerEventArgs args)
    {

    }

    async Task LoadInvoiceData(LoadDataArgs args)
    {
        string _sortProperty = null;
        string _sortOrder = null;
        if (args.Sorts != null && args.Sorts.Any())
        {
            var sort = args.Sorts.First();
            _sortProperty = sort.Property;
            _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
        }
        var parameters = new QueryStringParameters
        {
            PageNumber = (args.Skip.Value / _defaultPageSize) + 1,
            PageSize = _defaultPageSize,
            SearchKeyword = args.Filter,
            SortOrder = _sortOrder,
            SortProprety = _sortProperty
        };
        if (SelectedCustomerId <= 0)
        {
            getInvoiceListWithSummary = new GetInvoiceListWithSummary();
            await InvokeAsync(StateHasChanged);
            return;
        }

        isLoadingInvoices = true;
        await Task.Yield(); // Forces UI to update and show spinner
        var result = await invoicesService.GetInvoicesByCustomerIdWithSummary(SelectedCustomerId, parameters, _cancellationTokenSource.Token);
        if (result.IsT0)
        {
            getInvoiceListWithSummary = result.AsT0;
        }

        if (result.IsT1)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = result.AsT1.Detail
            });
        }

        isLoadingInvoices = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadInvoicedDeliveryNoteData(LoadDataArgs args)
    {
        if (SelectedCustomerId <= 0 || SelectedInvoiceId <= 0)
        {
            return;
        }

        try
        {
            string _sortProperty = null;
            string _sortOrder = null;
            if (args.Sorts != null && args.Sorts.Any())
            {
                var sort = args.Sorts.First();
                _sortProperty = sort.Property;
                _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
            }

            isLoadingDeliveryNotesInCurrentInvoice = true;
            _getDeliveryNotesWithSummariesResponse = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
                    customerId: SelectedCustomerId,
                    invoiceId: SelectedInvoiceId,
                    isInvoiced: true,
                    sortOrder: _sortOrder,
                    sortProperty: _sortProperty,
                    pageNumber: (args.Skip.Value / _defaultPageSize) + 1,
                    pageSize: _defaultPageSize,
                    cancellationToken: _cancellationTokenSource.Token
                );

            isLoadingDeliveryNotesInCurrentInvoice = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load uninvoiced delivery notes: {ex.Message}"
            });
            _uninvoicedDeliveryNotes = new List<GetDeliveryNoteBaseInfos>();
        }
    }

    private async Task LoadUninvoicedDeliveryNotesData(LoadDataArgs args)
    {
        try
        {
            if (SelectedCustomerId <= 0)
            {
                return;
            }

            string _sortProperty = string.Empty;
            string _sortOrder = string.Empty;

            if (args.Sorts != null && args.Sorts.Any())
            {
                var sort = args.Sorts.First();
                _sortProperty = sort.Property;
                _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
            }

            isLoadingUninvoicedDeliveryNotes = true;
            _uninvoicedDeliveryNotesSummary = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
                customerId: SelectedCustomerId,
                invoiceId: null,
                isInvoiced: false,
                sortOrder: _sortOrder,
                sortProperty: _sortProperty,
                pageNumber: (args.Skip.Value / _defaultPageSize) + 1,
                pageSize: _defaultPageSize,
                cancellationToken: _cancellationTokenSource.Token
            );

            isLoadingUninvoicedDeliveryNotes = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load uninvoiced delivery notes: {ex.Message}"
            });
            _uninvoicedDeliveryNotes = new List<GetDeliveryNoteBaseInfos>();
        }
    }
    #endregion

    #region Print methods
    private async Task PrintRetenuSourceClick()
    {
        if (SelectedInvoiceId <= 0)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = Localizer["warning"],
                Detail = Localizer["select_invoice"]
            });
            return;
        }

        var invoices = new List<int>() { SelectedInvoiceId };

        var pdfBytes = await PrintRetenuSourceService
        .GenerateRetenuSourcePdfAsync(invoices, cancellationToken: _cancellationTokenSource.Token);

        var fileName = $"Retenu à la source {SelectedInvoiceId}.pdf";
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes.Value), "application/pdf");
    }

    private async Task PrintInvoiceClick()
    {
        if (SelectedInvoiceId <= 0)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = Localizer["warning"],
                Detail = Localizer["select_invoice"]
            });
            return;
        }

        var invoices = new List<int>() { SelectedInvoiceId };

        var pdfBytes = await PrintFullInvoiceService
        .GenerateInvoicePdfAsync(SelectedInvoiceId, cancellationToken: _cancellationTokenSource.Token);

        var fileName = $"Invoice {SelectedInvoiceId}.pdf";
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes.Value), "application/pdf");
    }
    #endregion
}