@page "/manage-invoice"

@using Microsoft.Extensions.Localization
@using Radzen.Blazor
@using Radzen
@using System.Globalization
@using TunNetCom.SilkRoadErp.Sales.Contracts.Customers
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Requests
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Responses
@using TunNetCom.SilkRoadErp.Sales.Contracts.Invoice
@using TunNetCom.SilkRoadErp.Sales.Contracts.Sorting
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Customers
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.DeliveryNote
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Invoices
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using TunNetCom.SilkRoadErp.Sales.WebApp.Helpers
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine.Reports.Invoices.PrintInvoiceWithDetails
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine.Reports.Invoices.RetenueSource

@inject ICustomersApiClient customerService
@inject IInvoicesApiClient invoicesService
@inject IDeliveryNoteApiClient deliveryNoteService
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> Localizer
@inject ToastService toastService
@inject NotificationService NotificationService
@inject PrintRetenuSourceService PrintRetenuSourceService
@inject PrintFullInvoiceService PrintFullInvoiceService
@inject IJSRuntime JS

<div style="padding: 1.5rem; background-color: #f5f6f8; min-height: 100vh;">
    @* <!-- Header --> *@
    @* <h3 style="font-size: 1.75rem; font-weight: 600; color: #1a1a1a; margin-bottom: 1.5rem;"> *@
    @*     @Localizer["manage_customer_invoices"] *@
    @* </h3> *@

    <!-- Centered Customer Selection Card -->
    <div style="display: flex; justify-content: center; margin-bottom: 1.5rem;">
        <div style="width: 100%; max-width: 800px;">
            <RadzenCard Variant="Variant.Flat"
                        Style="background: #ffffff;
                               padding: 1.25rem;
                               border-radius: 12px;
                               box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
                               border: 1px solid #f0f0f0;">
                <RadzenRow JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeMD="8" SizeLG="6">
                        <div style="display: flex; flex-direction: column; gap: 0.75rem;">
                            <label style="font-weight: 600;
                                          color: #333;
                                          font-size: 0.9rem;
                                          text-align: center;">
                                @Localizer["select_customer"]
                            </label>
                            <RadzenDropDownDataGrid AllowClear="true"
                                                    IsLoading="@isLoadingCustomers"
                                                    @bind-Value="@SelectedCustomerId"
                                                    LoadData="@LoadCustomers"
                                                    AllowFiltering="true"
                                                    Style="width: 100%;
                                                           border-radius: 8px;
                                                           border: 1px solid #e0e0e0;
                                                           transition: all 0.2s ease;"
                                                    Data="@_filteredCustomers"
                                                    TextProperty="@nameof(CustomerResponse.Name)"
                                                    ValueProperty="@nameof(CustomerResponse.Id)"
                                                    Placeholder="@Localizer["select_customer"]"
                                                    Class="custom-dropdown">
                                <Columns>
                                    <RadzenDropDownDataGridColumn Property="@nameof(CustomerResponse.Id)"
                                                                  Title="ID"
                                                                  Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="@nameof(CustomerResponse.Name)"
                                                                  Title="Name"
                                                                  Width="300px" />
                                </Columns>
                            </RadzenDropDownDataGrid>
                        </div>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </div>
    </div>

    <!-- Main Content -->
    <RadzenRow Gap="1.5rem">
       
        <!-- Invoiced Delivery Notes Section -->
        <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard Variant="Variant.Flat"
                        Style="background-color: #ffffff; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                            <RadzenDataGrid @ref="_grid"
                                            AllowRowSelectOnRowClick="true"
                                            AllowFiltering="true"
                                            FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            AllowPaging="true"
                                            PageSize="_defaultPageSize"
                                            PagerHorizontalAlign="HorizontalAlign.Left"
                                            ShowPagingSummary="true"
                                            Count="_getDeliveryNotesWithSummariesResponse.GetDeliveryNoteBaseInfos.TotalCount"
                                            AllowSorting="true"
                                            GotoFirstPageOnSort="true"
                                            TItem="GetDeliveryNoteBaseInfos"
                                            Data="@_getDeliveryNotesWithSummariesResponse.GetDeliveryNoteBaseInfos.Items"
                                            LoadData="@LoadInvoicedDeliveryNoteData"
                                            SelectionMode="DataGridSelectionMode.Multiple"
                                            IsLoading="@isLoadingDeliveryNotesInCurrentInvoice"
                                            @bind-Value="@_selectedDeliveryNotesToDetach"
                                            Style="border: none;"
                                            Class="custom-grid">
                                <EmptyTemplate>
                                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
                                </EmptyTemplate>
                                <HeaderTemplate>
                                    <div style="font-size: 1.25rem; font-weight: 600; color: #1a1a1a; padding-bottom: 1rem;">
                                        @Localizer["delivery_notes_details"]
                                    </div>
                                </HeaderTemplate>
                                <Columns>
                                    <RadzenDataGridColumn Property="@nameof(GetDeliveryNoteBaseInfos.Number)"
                                                          Title="@Localizer["number"]"
                                                          Width="140px" />
                                    <RadzenDataGridColumn Property="@nameof(GetDeliveryNoteBaseInfos.GrossAmount)"
                                                          Title="@Localizer["total_ex_tax"]"
                                                          Width="140px">
                                        <Template Context="detail">
                                            @detail.GrossAmount.FormatAmount()
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Property="@nameof(GetDeliveryNoteBaseInfos.NetAmount)"
                                                          Title="@Localizer["net_payer"]"
                                                          Width="140px">
                                        <Template Context="detail">
                                            @detail.NetAmount.FormatAmount()
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                            <!-- Delivery Notes Summary -->
                            <RadzenStack Orientation="Radzen.Orientation.Horizontal"
                                         Gap="1.5rem"
                                         JustifyContent="JustifyContent.End"
                                         Style="margin-top: 1rem;">
                                <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                                    @Localizer["total_net"]: <strong>@_getDeliveryNotesWithSummariesResponse?.TotalNetAmount.FormatAmount()</strong>
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                                    @Localizer["total_gross"]: <strong>@_getDeliveryNotesWithSummariesResponse?.TotalGrossAmount.FormatAmount()</strong>
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                                    @Localizer["total_vat"]: <strong>@_getDeliveryNotesWithSummariesResponse?.TotalVatAmount.FormatAmount()</strong>
                                </RadzenText>
                            </RadzenStack>
                <RadzenButton Text="@Localizer["detach_from_invoice"]"
                              Click="@DetachDeliveryNotesFromInvoice"
                              Disabled="@(SelectedInvoiceId == 0 || !_selectedDeliveryNotesToDetach.Any())"
                              ButtonStyle="ButtonStyle.Primary"
                              Style="margin-top: 1rem; border-radius: 6px; padding: 0.5rem 1rem; font-weight: 500;" />
            </RadzenCard>
        </RadzenColumn>
         <!-- Invoices Section -->
        <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard Variant="Variant.Flat"
                        Style="background-color: #ffffff; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                <RadzenDataGrid @ref="InvoiceGrid"
                                AllowFiltering="true"
                                AllowPaging="true"
                                PageSize="_defaultPageSize"
                                PagerHorizontalAlign="HorizontalAlign.Left"
                                ShowPagingSummary="true"
                                AllowSorting="true"
                                Count="@getInvoiceListWithSummary.Invoices.TotalCount"
                                Data="@getInvoiceListWithSummary.Invoices.Items"
                                LoadData="@LoadInvoiceData"
                                @bind-Value="@SelectedInvoice"
                                IsLoading="@isLoadingInvoices"
                                SelectionMode="DataGridSelectionMode.Single"
                                Style="border: none;"
                                Class="custom-grid">
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
                    </EmptyTemplate>
                    <HeaderTemplate>
                        <div style="font-size: 1.25rem; font-weight: 600; color: #1a1a1a; padding-bottom: 1rem;">
                            @Localizer["customer_invoice_details"]
                        </div>
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(InvoiceResponse.Number)"
                                              Title="@Localizer["invoice_number"]"
                                              Width="140px" />
                        <RadzenDataGridColumn Property="@nameof(InvoiceResponse.Date)"
                                              Title="@Localizer["date"]"
                                              FormatString="{0:d}"
                                              Width="140px" />
                        <RadzenDataGridColumn Property="@nameof(InvoiceResponse.TotalIncludingTaxAmount)"
                                              Title="@Localizer["total_incl_tax"]"
                                              Width="140px">
                            <Template Context="detail">
                                @detail.TotalIncludingTaxAmount.FormatAmount()
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <!-- Invoice Summary -->
                <RadzenStack Orientation="Radzen.Orientation.Horizontal"
                             Gap="1.5rem"
                             JustifyContent="JustifyContent.End"
                             Style="margin-top: 1rem;">
                    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                        @Localizer["total_net"]: <strong>@getInvoiceListWithSummary.TotalIncludingTaxAmount.FormatAmount()</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                        @Localizer["total_gross"]: <strong>@getInvoiceListWithSummary.TotalExcludingTaxAmount.FormatAmount()</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                        @Localizer["total_vat"]: <strong>@getInvoiceListWithSummary.TotalVATAmount.FormatAmount()</strong>
                    </RadzenText>
                </RadzenStack>
                <!-- Print Buttons -->
                <div style="display: flex; gap: 1rem; flex-wrap: wrap; margin-top: 1.5rem; margin-bottom: 1rem;">
                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                  Size="ButtonSize.Small"
                                  Style="padding: 0.25rem 0.75rem; border-radius: 4px;"
                                  Click="@PrintRetenuSourceClick">
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <RadzenIcon Icon="description" Style="font-size: 14px;" />
                            <span style="font-size: 0.85rem;">Retenu</span>
                        </div>
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                  Size="ButtonSize.Small"
                                  Style="padding: 0.25rem 0.75rem; border-radius: 4px;"
                                  Click="@PrintInvoiceClick">
                        <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <RadzenIcon Icon="get_app" Style="font-size: 14px;" />
                            <span style="font-size: 0.85rem;">Facture</span>
                        </div>
                    </RadzenButton>
                </div>
            </RadzenCard>
        </RadzenColumn>

        <!-- Uninvoiced Delivery Notes Section -->
        <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenCard Variant="Variant.Flat"
                        Style="background-color: #ffffff; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
                <RadzenDataGrid @ref="_grid"
                                AllowRowSelectOnRowClick="true"
                                AllowFiltering="true"
                                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                AllowPaging="true"
                                PagerHorizontalAlign="HorizontalAlign.Left"
                                ShowPagingSummary="true"
                                PageSize="_defaultPageSize"
                                Count="@_uninvoicedDeliveryNotesSummary.GetDeliveryNoteBaseInfos.TotalCount"
                                AllowSorting="true"
                                Data="@_uninvoicedDeliveryNotesSummary.GetDeliveryNoteBaseInfos.Items"
                                LoadData="LoadUninvoicedDeliveryNotesData"
                                IsLoading="@isLoadingUninvoicedDeliveryNotes"
                                SelectionMode="DataGridSelectionMode.Multiple"
                                @bind-Value="@_selectedDeliveryNotesToAttach"
                                Style="border: none;"
                                Class="custom-grid">
                    <EmptyTemplate>
                        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
                    </EmptyTemplate>
                    <HeaderTemplate>
                        <div style="font-size: 1.25rem; font-weight: 600; color: #1a1a1a; padding-bottom: 1rem;">
                            @Localizer["uninvoiced_delivery_notes_details"]
                        </div>
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(GetDeliveryNoteBaseInfos.Number)"
                                              Title="@Localizer["number"]"
                                              Width="140px" />
                        <RadzenDataGridColumn Property="@nameof(GetDeliveryNoteBaseInfos.NetAmount)"
                                              Title="@Localizer["total_ex_tax"]"
                                              Width="140px">
                            <Template Context="detail">
                                @detail.NetAmount.FormatAmount()
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(GetDeliveryNoteBaseInfos.GrossAmount)"
                                              Title="@Localizer["net_payer"]"
                                              Width="140px">
                            <Template Context="detail">
                                @detail.GrossAmount.FormatAmount()
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
                <!-- Uninvoiced Delivery Notes Summary -->
                <RadzenStack Orientation="Radzen.Orientation.Horizontal"
                             Gap="1.5rem"
                             JustifyContent="JustifyContent.End"
                             Style="margin-top: 1rem;">
                    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                        @Localizer["total_net"]: <strong>@_uninvoicedDeliveryNotesSummary?.TotalNetAmount.FormatAmount()</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                        @Localizer["total_gross"]: <strong>@_uninvoicedDeliveryNotesSummary?.TotalGrossAmount.FormatAmount()</strong>
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
                        @Localizer["total_vat"]: <strong>@_uninvoicedDeliveryNotesSummary?.TotalVatAmount.FormatAmount()</strong>
                    </RadzenText>
                </RadzenStack>
                <RadzenButton Click="@(args => AttachDeliveryNoteToInvoiceClick("Primary button"))"
                              Text="@Localizer["attach_delivery_note_to_invoice"]"
                              ButtonStyle="ButtonStyle.Primary"
                              Style="margin-top: 1rem; border-radius: 6px; padding: 0.5rem 1rem; font-weight: 500;" />
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</div>

<style>
    .custom-dropdown {
        --rz-dropdown-border-hover: #4f46e5;
        --rz-dropdown-shadow: 0 2px 10px rgba(102, 126, 234, 0.1);
    }
    .custom-dropdown .rz-dropdown-panel {
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border: 1px solid #e5e7eb;
    }
    .custom-dropdown .rz-dropdown-item:hover {
        background: #f9fafb;
    }
    .custom-dropdown:hover {
        border-color: #007bff;
    }
    .custom-grid .rz-datatable {
        border: none !important;
        background-color: transparent;
    }
    .custom-grid .rz-datatable-thead {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e0e0e0;
    }
    .custom-grid .rz-datatable-tbody tr:hover {
        background-color: #f1f3f5;
    }
</style>
@code {
    #region Fields and Properties
    private const int _defaultPageSize = 5;
    private int _selectedCustomerId;
    private int SelectedCustomerId
    {
        get => _selectedCustomerId;
        set
        {
            if (_selectedCustomerId != value)
            {
                _selectedCustomerId = value;
                SelectedInvoiceId = 0;
                SelectedInvoice = new List<InvoiceResponse>();
                getInvoiceListWithSummary = new GetInvoiceListWithSummary();
                _uninvoicedDeliveryNotes = new List<GetDeliveryNoteBaseInfos>();
                _uninvoicedDeliveryNotesSummary = new GetDeliveryNotesWithSummariesResponse();
                _getDeliveryNotesWithSummariesResponse = new GetDeliveryNotesWithSummariesResponse();
                if (value > 0)
                {
                    _ = LoadInvoicesForCustomers();
                    _ = LoadUninvoicedDeliveryNotes(value);
                }
            }
        }
    }
    private int _selectedInvoiceId;
    private int SelectedInvoiceId
    {
        get => _selectedInvoiceId;
        set
        {
            if (_selectedInvoiceId != value)
            {
                _selectedInvoiceId = value;
                _ = LoadInvoicesForCustomers();
                _ = LoadDeliveryNotesForSelectedInvoice(value);
            }
        }
    }
    private IList<InvoiceResponse> _selectedInvoices = new List<InvoiceResponse>();
    private IList<InvoiceResponse> SelectedInvoice
    {
        get => _selectedInvoices;
        set
        {
            _selectedInvoices = value;
            var selectedInvoice = _selectedInvoices?.FirstOrDefault();
            _ = LoadDeliveryNotesForSelectedInvoice(selectedInvoice?.Number ?? 0);
        }
    }

    bool isLoadingCustomers = false;
    bool isLoadingInvoices = false;
    bool isLoadingDeliveryNotesInCurrentInvoice = false;
    bool isLoadingUninvoicedDeliveryNotes = false;
    private List<CustomerResponse> _filteredCustomers { get; set; } = new();
    private GetInvoiceListWithSummary getInvoiceListWithSummary { get; set; } = new GetInvoiceListWithSummary();
    private IList<GetDeliveryNoteBaseInfos> _selectedDeliveryNoteIdsToDetach = new List<GetDeliveryNoteBaseInfos>();
    private IList<GetDeliveryNoteBaseInfos> _uninvoicedDeliveryNotes { get; set; } = new List<GetDeliveryNoteBaseInfos>();
    private IList<GetDeliveryNoteBaseInfos> _selectedDeliveryNotesToAttach { get; set; } = new List<GetDeliveryNoteBaseInfos>();
    private CancellationTokenSource _cancellationTokenSource = new();
    private RadzenDataGrid<GetDeliveryNoteBaseInfos> _grid;
    private RadzenDataGrid<InvoiceResponse> InvoiceGrid;
    private GetDeliveryNotesWithSummariesResponse _uninvoicedDeliveryNotesSummary = new GetDeliveryNotesWithSummariesResponse();
    private GetDeliveryNotesWithSummariesResponse _getDeliveryNotesWithSummariesResponse = new GetDeliveryNotesWithSummariesResponse();
    private IList<GetDeliveryNoteBaseInfos> _selectedDeliveryNotesToDetach
    {
        get => _selectedDeliveryNoteIdsToDetach;
        set => _selectedDeliveryNoteIdsToDetach = value;
    }
    #endregion

    #region Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await SearchClients();
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
    #endregion

    #region Data Loading Methods
    private async Task LoadCustomers(LoadDataArgs args)
    {
        isLoadingCustomers = true;
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = _defaultPageSize,
            SearchKeyword = args.Filter
        };

        try
        {
            var pagedCustomers = await customerService.GetAsync(parameters, _cancellationTokenSource.Token);
            _filteredCustomers = pagedCustomers.Items;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load customers: {ex.Message}"
            });
            _filteredCustomers = new List<CustomerResponse>();
        }

        isLoadingCustomers = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SearchClients()
    {
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = _defaultPageSize,
            SearchKeyword = null
        };

        _filteredCustomers = (await customerService.GetAsync(parameters, _cancellationTokenSource.Token)).Items;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadDeliveryNotesForSelectedInvoice(int invoiceNum)
    {
        SelectedInvoiceId = invoiceNum;
        _getDeliveryNotesWithSummariesResponse = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
                customerId: SelectedCustomerId,
                invoiceId: SelectedInvoiceId,
                isInvoiced: true,
                sortOrder: null,
                sortProperty: null,
                pageNumber: 1,
                pageSize: _defaultPageSize,
				searchKeyword: null,
                startDate:null,
				EndDate: null,
                cancellationToken: _cancellationTokenSource.Token
            );

        //TODO manage the case when no delivery notes are found
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadInvoicesForCustomers()
    {
        var parameters = new QueryStringParameters
        {
            //TODO remove magic numbers
            PageNumber = 1,
            PageSize = _defaultPageSize,
            SearchKeyword = null
        };

        if (SelectedCustomerId <= 0)
        {
            getInvoiceListWithSummary = new GetInvoiceListWithSummary();
            await InvokeAsync(StateHasChanged);
            return;
        }

        var result = await invoicesService.GetInvoicesByCustomerIdWithSummary(
            SelectedCustomerId,
            parameters,
            _cancellationTokenSource.Token);

        if (result.IsT0)
        {
            getInvoiceListWithSummary = result.AsT0;
        }

        if (result.IsT1)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = result.AsT1.Detail
            });
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadUninvoicedDeliveryNotes(int selectedCustomerId)
    {
        SelectedCustomerId = selectedCustomerId;

        try
        {
            _uninvoicedDeliveryNotesSummary = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
                customerId: SelectedCustomerId,
                invoiceId: null,
                isInvoiced: false,
                sortOrder: null,
                sortProperty: null,
                pageNumber: 1,
                pageSize: _defaultPageSize,
                searchKeyword: null,
                startDate:null,
                EndDate: null,
                cancellationToken: _cancellationTokenSource.Token
            );
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load uninvoiced delivery notes: {ex.Message}"
            });
            _uninvoicedDeliveryNotes = new List<GetDeliveryNoteBaseInfos>();
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task OnSort(DataGridColumnSortEventArgs<GetDeliveryNoteBaseInfos> args)
    {
        var columnName = args.Column.Property;
        var sortOrder = args.SortOrder;
        await FetchSortedDeliveryNotesAsync(columnName, sortOrder.ToString());
    }

    private async Task FetchSortedDeliveryNotesAsync(string columnName, string sortOrder)
    {
        _getDeliveryNotesWithSummariesResponse = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
            customerId: SelectedCustomerId,
            invoiceId: SelectedInvoiceId,
            isInvoiced: true,
            pageNumber: 1,
            pageSize: _defaultPageSize,
            sortOrder: sortOrder,
            sortProperty: columnName,
            searchKeyword: null,
            startDate:null,
            EndDate: null,
            cancellationToken: _cancellationTokenSource.Token);
    }

    private async Task AttachDeliveryNoteToInvoiceClick(string text)
    {
        if (SelectedInvoiceId > 0 && _selectedDeliveryNotesToAttach?.Any() == true)
        {
            var deliveryNoteIds = _selectedDeliveryNotesToAttach.Select(dn => dn.Number).ToList();
            var attachToInvoiceRequest = new AttachToInvoiceRequest
            {
                InvoiceId = SelectedInvoiceId,
                DeliveryNoteIds = deliveryNoteIds
            };

            var result = await deliveryNoteService.AttachToInvoiceAsync(attachToInvoiceRequest, default);

            if (result)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = Localizer["success"],
                    Detail = Localizer["delivery_notes_attached"]
                });

                _selectedDeliveryNotesToAttach = new List<GetDeliveryNoteBaseInfos>();

                await LoadInvoicesForCustomers();
                await LoadDeliveryNotesForSelectedInvoice(SelectedInvoiceId);
                await LoadUninvoicedDeliveryNotes(_selectedCustomerId);

            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["error"]
                });
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = Localizer["warning"],
                Detail = Localizer["select_invoice_and_delivery_notes"]
            });
        }
    }

    private async Task DetachDeliveryNotesFromInvoice()
    {
        try
        {
            var deliveryNoteIds = _selectedDeliveryNotesToDetach.Select(dn => dn.Number).ToList();
            var request = new DetachFromInvoiceRequest
            {
                InvoiceId = SelectedInvoiceId,
                DeliveryNoteIds = deliveryNoteIds
            };

            var result = await deliveryNoteService.DetachFromInvoiceAsync(request, _cancellationTokenSource.Token);

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = Localizer["success"],
                Detail = Localizer["delivery_notes_detached"]
            });
            await LoadInvoicesForCustomers();
            await LoadUninvoicedDeliveryNotes(_selectedCustomerId);
            await LoadDeliveryNotesForSelectedInvoice(_selectedInvoiceId);

            _selectedDeliveryNotesToDetach = new List<GetDeliveryNoteBaseInfos>();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = ex.Message
            });
            Console.WriteLine($"Error detaching delivery notes from invoice: {ex.Message}");
        }
    }

    void OnPage(PagerEventArgs args)
    {

    }

    async Task LoadInvoiceData(LoadDataArgs args)
    {
        string _sortProperty = null;
        string _sortOrder = null;
        if (args.Sorts != null && args.Sorts.Any())
        {
            var sort = args.Sorts.First();
            _sortProperty = sort.Property;
            _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
        }
        var parameters = new QueryStringParameters
        {
            PageNumber = (args.Skip.Value / _defaultPageSize) + 1,
            PageSize = _defaultPageSize,
            SearchKeyword = args.Filter,
            SortOrder = _sortOrder,
            SortProprety = _sortProperty
        };
        if (SelectedCustomerId <= 0)
        {
            getInvoiceListWithSummary = new GetInvoiceListWithSummary();
            await InvokeAsync(StateHasChanged);
            return;
        }

        isLoadingInvoices = true;
        await Task.Yield(); // Forces UI to update and show spinner
        var result = await invoicesService.GetInvoicesByCustomerIdWithSummary(SelectedCustomerId, parameters, _cancellationTokenSource.Token);
        if (result.IsT0)
        {
            getInvoiceListWithSummary = result.AsT0;
        }

        if (result.IsT1)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = result.AsT1.Detail
            });
        }

        isLoadingInvoices = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadInvoicedDeliveryNoteData(LoadDataArgs args)
    {
        if (SelectedCustomerId <= 0 || SelectedInvoiceId <= 0)
        {
            return;
        }

        try
        {
            string _sortProperty = null;
            string _sortOrder = null;
            if (args.Sorts != null && args.Sorts.Any())
            {
                var sort = args.Sorts.First();
                _sortProperty = sort.Property;
                _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
            }

            isLoadingDeliveryNotesInCurrentInvoice = true;
            _getDeliveryNotesWithSummariesResponse = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
                    customerId: SelectedCustomerId,
                    invoiceId: SelectedInvoiceId,
                    isInvoiced: true,
                    sortOrder: _sortOrder,
                    sortProperty: _sortProperty,
                    pageNumber: (args.Skip.Value / _defaultPageSize) + 1,
                    pageSize: _defaultPageSize,
                    searchKeyword: null,
                    startDate:null,
                    EndDate: null,
                    cancellationToken: _cancellationTokenSource.Token
                            );

            isLoadingDeliveryNotesInCurrentInvoice = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load uninvoiced delivery notes: {ex.Message}"
            });
            _uninvoicedDeliveryNotes = new List<GetDeliveryNoteBaseInfos>();
        }
    }

    private async Task LoadUninvoicedDeliveryNotesData(LoadDataArgs args)
    {
        try
        {
            if (SelectedCustomerId <= 0)
            {
                return;
            }

            string _sortProperty = string.Empty;
            string _sortOrder = string.Empty;

            if (args.Sorts != null && args.Sorts.Any())
            {
                var sort = args.Sorts.First();
                _sortProperty = sort.Property;
                _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
            }

            isLoadingUninvoicedDeliveryNotes = true;
            _uninvoicedDeliveryNotesSummary = await deliveryNoteService.GetDeliveryNotesWithSummariesAsync(
                customerId: SelectedCustomerId,
                invoiceId: null,
                isInvoiced: false,
                sortOrder: _sortOrder,
                sortProperty: _sortProperty,
                pageNumber: (args.Skip.Value / _defaultPageSize) + 1,
                pageSize: _defaultPageSize,
                searchKeyword: null,
                startDate:null,
                EndDate: null,
                cancellationToken: _cancellationTokenSource.Token);

            isLoadingUninvoicedDeliveryNotes = false;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load uninvoiced delivery notes: {ex.Message}"
            });
            _uninvoicedDeliveryNotes = new List<GetDeliveryNoteBaseInfos>();
        }
    }
    #endregion

    #region Print methods
    private async Task PrintRetenuSourceClick()
    {
        if (SelectedInvoiceId <= 0)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = Localizer["warning"],
                Detail = Localizer["select_invoice"]
            });
            return;
        }

        var invoices = new List<int>() { SelectedInvoiceId };

        var pdfBytes = await PrintRetenuSourceService
        .GenerateRetenuSourcePdfAsync(invoices, cancellationToken: _cancellationTokenSource.Token);

        var fileName = $"Retenu à la source {SelectedInvoiceId}.pdf";
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes.Value), "application/pdf");
    }

    private async Task PrintInvoiceClick()
    {
        if (SelectedInvoiceId <= 0)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = Localizer["warning"],
                Detail = Localizer["select_invoice"]
            });
            return;
        }

        var invoices = new List<int>() { SelectedInvoiceId };

        var pdfBytes = await PrintFullInvoiceService
        .GenerateInvoicePdfAsync(SelectedInvoiceId, cancellationToken: _cancellationTokenSource.Token);

        var fileName = $"Invoice {SelectedInvoiceId}.pdf";
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes.Value), "application/pdf");
    }
    #endregion
}