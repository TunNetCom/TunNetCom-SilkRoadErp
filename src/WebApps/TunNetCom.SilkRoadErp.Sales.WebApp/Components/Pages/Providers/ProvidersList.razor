@page "/providers_list"
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Providers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services
@using TunNetCom.SilkRoadErp.Sales.Contracts.Providers
@using BlazorBootstrap
@using TunNetCom.NotFoundModal
@using TunNetCom.DeleteModal
@inject IProvidersApiClient providerService
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> Localizer

<div class="container mt-4">
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-6 d-flex align-items-center">
                <h3 class="mb-3">@Localizer["providers"]</h3>
            </div>
            <div class="col-md-6 d-flex justify-content-end align-items-center">
                <button class="btn btn-primary mb-3" @onclick="CreateProvider">@Localizer["add_provider"]</button>
            </div>
        </div>
    </div>
    <input class="form-control mb-3" placeholder="@Localizer["Search"]" @bind="searchKeyword" @oninput="SearchClients" />


    <Grid TItem="ProviderResponse"
          Class="table table-hover table-bordered table-striped"
          DataProvider="ProvidersDataProvider"
          AllowPaging="true"
          AllowSorting="true"
          Responsive="true"
          @ref="grid">
        <GridColumn TItem="ProviderResponse" HeaderText="@Localizer["provider_name"]" PropertyName="ProviderName" SortString="ProviderName" SortKeySelector="item => item.Nom" FilterTextboxWidth="80">
            @context.Nom
        </GridColumn>
        <GridColumn TItem="ProviderResponse" HeaderText="@Localizer["provider_phone"]" PropertyName="ProviderPhone" SortString="ProviderPhone" SortKeySelector="item => item.Tel" FilterTextboxWidth="100">
            @context.Tel
        </GridColumn>
        <GridColumn TItem="ProviderResponse" HeaderText="@Localizer["provider_email"]" PropertyName="ProviderEmail" SortString="ProviderEmail" SortKeySelector="item => item.Mail" FilterTextboxWidth="120">
            @context.Mail
        </GridColumn>
        <GridColumn TItem="ProviderResponse" HeaderText="@Localizer["actions_label"]">
            <Button Color="ButtonColor.Primary" @onclick="((args) => OnClickEditButton(args, context.Id))">
                @Localizer["edit_button_label"]
            </Button>
            <Button Color="ButtonColor.Danger" @onclick="((args) => OnClickDeleteButton(args, context.Id))">
                @Localizer["delete_button_label"]
            </Button>
        </GridColumn>
    </Grid>
</div>

<Modal @ref="yesOrNoDeleteModal" />
<Modal @ref="notFoundModal" />

@code {
    [Inject] protected ToastService toastService { get; set; } = default!;
    private string searchKeyword = string.Empty;
    int currentProviderIdToDelete;
    private CancellationTokenSource cancellationTokenSource = new();
    private Modal yesOrNoDeleteModal = default!;
    Grid<ProviderResponse> grid = default!;
    private Modal notFoundModal = default!;


    private async Task ProcessDelete(MouseEventArgs e)
    {
        await providerService.DeleteAsync(currentProviderIdToDelete, cancellationTokenSource.Token);
        toastService.Notify(new(ToastType.Warning, $"{Localizer["provider"]} {Localizer["deleted_with_success"]}"));
        await yesOrNoDeleteModal.HideAsync();
    }

    protected void OnClickEditButton(EventArgs args, int id)
    {
        EditProvider(id);
    }

    private async Task SearchClients(ChangeEventArgs e)
    {
        searchKeyword = e?.Value?.ToString() ?? string.Empty;

        await grid.RefreshDataAsync();
    }

    protected async Task OnClickDeleteButton(EventArgs args, int id)
    {
        currentProviderIdToDelete = id;
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, ProcessDelete));
        await yesOrNoDeleteModal.ShowAsync<DeleteModal>(title: Localizer["delete_modal_title"], parameters: parameters);
    }

    private async Task<GridDataProviderResult<ProviderResponse>> ProvidersDataProvider(
        GridDataProviderRequest<ProviderResponse> request)
    {
        string sortString = string.Empty;
        SortDirection sortDirection = SortDirection.None;

        if (request.Sorting is not null && request.Sorting.Any())
        {
            sortString = request.Sorting.FirstOrDefault()!.SortString;
            sortDirection = request.Sorting.FirstOrDefault()!.SortDirection;
        }
        var providersParameters = new QueryStringParameters
            {
                PageNumber = request.PageNumber,
                PageSize = request.PageSize,
                SearchKeyword = searchKeyword
            };

        var result = await providerService.GetPagedAsync(providersParameters, cancellationTokenSource.Token);
        return await Task.FromResult(new GridDataProviderResult<ProviderResponse> { Data = result.Items, TotalCount = result.TotalCount });
    }

    public void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }

    private void CreateProvider()
    {
        navigationManager.NavigateTo("/editprovider");
    }

    private void EditProvider(int id)
    {
        navigationManager.NavigateTo($"/editprovider/{id}");
    }
}
