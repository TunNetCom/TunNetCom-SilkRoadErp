@page "/providers_list"
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Providers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services
@using TunNetCom.SilkRoadErp.Sales.Contracts.Providers
@using Radzen
@using Radzen.Blazor
@using TunNetCom.NotFoundModal
@using TunNetCom.DeleteModal
@using Microsoft.JSInterop
@using System.Text.Json

@inject DialogService DialogService
@inject IJSRuntime JSRuntime
@inject IProvidersApiClient providerService
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> Localizer
@inject NotificationService NotificationService

<div class="providers-container">
    <div class="providers-card">
        <div class="providers-header">
            <h3 class="providers-title">@Localizer["providers"]</h3>
            <RadzenButton Icon="add" Text="@Localizer["add_provider"]"
                          ButtonStyle="ButtonStyle.Primary"
                          Click="CreateProvider"
                          Class="btn-primary" />
        </div>

        <RadzenTextBox Placeholder="@Localizer["Search"]"
                       Change="@(async (string value) => await LoadData(new LoadDataArgs() { Filter = value }))"
                       Class="providers-search" />

        <RadzenDataGrid TItem="ProviderResponse"
                        GridLines="@GridLines"
                        Data="@providers"
                        Count="@totalCount"
                        LoadData="@LoadData"
                        AllowFiltering="true"
                        AllowPaging="true"
                        AllowSorting="true"
                        FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        PageSize="@PageSize"
                        Density="Density.Compact"
                        Class="providers-grid"
                        @ref="grid">
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="ProviderResponse" Property="Nom" Title="@Localizer["provider_name"]" Width="@NameColumnWidth">
                    <Template Context="provider">
                        <span class="grid-cell">@provider.Nom</span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProviderResponse" Property="Tel" Title="@Localizer["provider_phone"]" Width="@PhoneColumnWidth">
                    <Template Context="provider">
                        <span class="grid-cell">@provider.Tel</span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProviderResponse" Property="Mail" Title="@Localizer["provider_email"]" Width="@EmailColumnWidth">
                    <Template Context="provider">
                        <span class="grid-cell">@provider.Mail</span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProviderResponse" Filterable="false" Sortable="false" Width="@ActionsColumnWidth" TextAlign="TextAlign.Center">
                    <Template Context="provider">
                        <RadzenButton Icon="account_circle" ButtonStyle="ButtonStyle.Info" Variant="Variant.Outlined" Size="ButtonSize.Medium" Shade="Shade.Lighter"
                                      Click="@(() => OpenOrder(provider.Id))"
                                      Title="@Localizer["delete_button_label"]" />
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Outlined" Size="ButtonSize.Medium" Shade="Shade.Lighter"  class="rz-my-1 rz-ms-1"
                                          Click="@(() => EditProvider(provider.Id))"
                                          Title="@Localizer["edit_button_label"]" />
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Size="ButtonSize.Medium" Shade="Shade.Lighter"
                                          Click="@(() => OnClickDeleteButton(provider.Id))"
                                          Title="@Localizer["delete_button_label"]" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

<style>
    :root {
        --primary-color: #1a73e8;
        --primary-hover: #135ab6;
        --danger-color: #d32f2f;
        --danger-hover: #b71c1c;
        --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --info-color: #0288d1;
        --info-hover: #01579b;
        --card-bg: #ffffff;
        --grid-header-bg: #f5f7fa;
        --grid-header-color: #202124;
        --grid-row-hover: #f1f3f5;
        --border-radius: 8px;
        --border-color: #e0e0e0;
        --text-color: #202124;
        --muted-text: #5f6368;
    }

    .providers-container {
        padding: 1.25rem;
        max-width: 1280px;
        margin: 1rem auto;
        font-family: font-family: Georgia, serif;
    }

    .providers-card {
        background: var(--card-bg);
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 1.5rem;
        border: none;
    }

    .providers-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.25rem;
    }

    .providers-title {
        color: var(--text-color);
        font-weight: 600;
        margin: 0;
        font-size: 2rem;
        line-height: 1.2;
    }

    .providers-search {
        width: 100%;
        border-radius: var(--border-radius);
        border: 1px solid var(--border-color);
        padding: 0.75rem 1rem;
        margin-bottom: 1.25rem;
        font-size: 0.95rem;
        color: var(--text-color);
        background: #fafafa;
    }

        .providers-search:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(26, 115, 232, 0.1);
            outline: none;
            background: #ffffff;
        }

    .providers-grid {
        border-radius: var(--border-radius);
        overflow: hidden;
        background: var(--card-bg);
        border: none;
    }

        .providers-grid .rz-datatable thead {
            background: var(--grid-header-bg);
            color: var(--grid-header-color);
            border-bottom: 1px solid var(--border-color);
        }

            .providers-grid .rz-datatable thead th {
                font-weight: 500;
                padding: 0.75rem 1rem;
                text-align: left;
                font-size: 0.9rem;
                text-transform: uppercase;
                letter-spacing: 0.02em;
            }

        .providers-grid .rz-datatable tbody tr {
            border-bottom: 1px solid var(--border-color);
        }

            .providers-grid .rz-datatable tbody tr:last-child {
                border-bottom: none;
            }

            .providers-grid .rz-datatable tbody tr:hover {
                background: var(--grid-row-hover);
            }

    .grid-cell {
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        color: var(--text-color);
        line-height: 1.5;
    }

    .providers-grid .rz-grid-table {
        border-collapse: collapse;
    }

</style>
@code {
    private const int PageSize = 10;
    private const string NameColumnWidth = "200px";
    private const string PhoneColumnWidth = "150px";
    private const string EmailColumnWidth = "200px";
    private const string ActionsColumnWidth = "150px";
    private const int NotificationDuration = 4000;
    private const int InitialPageNumber = 1;
    private const int InitialPageSize = 10;
    Radzen.DataGridGridLines GridLines = Radzen.DataGridGridLines.Default;

    [Inject] protected ToastService toastService { get; set; } = default!;

    private string searchKeyword = string.Empty;
    private int currentProviderIdToDelete;
    private CancellationTokenSource cancellationTokenSource = new();
    private RadzenDataGrid<ProviderResponse> grid = default!;
    private IEnumerable<ProviderResponse> providers = new List<ProviderResponse>();
    private int totalCount;

    #region Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await SearchProviders(null);
    }

    public void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }
    #endregion

    private async Task LoadData(LoadDataArgs args)
    {
        var queryParameters = new QueryStringParameters
            {
                PageNumber = (args.Skip ?? 0) / (args.Top ?? PageSize) + 1,
                PageSize = args.Top ?? PageSize,
                SearchKeyword = args.Filter
            };

        var result = await providerService.GetPagedAsync(queryParameters, cancellationTokenSource.Token);
        providers = result.Items;
        totalCount = result.TotalCount;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SearchProviders(string value)
    {
        searchKeyword = value;
        var queryParameters = new QueryStringParameters
            {
                PageNumber = InitialPageNumber,
                PageSize = InitialPageSize,
                SearchKeyword = value
            };

        var result = await providerService.GetPagedAsync(queryParameters, cancellationTokenSource.Token);
        providers = result.Items;
        totalCount = result.TotalCount;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnClickDeleteButton(int id)
    {
        currentProviderIdToDelete = id;
        var confirmed = await DialogService.Confirm(
            Localizer["delete_modal_title"],
            Localizer["delete_modal_message"],
            new ConfirmOptions
                {
                    OkButtonText = Localizer["yes"],
                    CancelButtonText = Localizer["no"]
                });

        if (confirmed == true)
        {
            await providerService.DeleteAsync(currentProviderIdToDelete, cancellationTokenSource.Token);
            ShowNotification(
                NotificationSeverity.Warning,
                Localizer["provider"],
                Localizer["deleted_with_success"]);

            await grid.Reload();
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task OpenOrder(int providerId)
    {
        await LoadStateAsync();

        await DialogService.OpenAsync<PreviewDialog>($"ProviderId {providerId}",
               new Dictionary<string, object>() { { "ProviderId", providerId } },
               new DialogOptions()
                   {
                       Resizable = true,
                       Draggable = true,
                       Resize = OnResize,
                       Drag = OnDrag,
                       Width = Settings != null ? Settings.Width : "700px",
                       Height = Settings != null ? Settings.Height : "512px",
                       Left = Settings != null ? Settings.Left : null,
                       Top = Settings != null ? Settings.Top : null
                   });

        await SaveStateAsync();
    }
    void OnDrag(System.Drawing.Point point)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog drag. Left:{point.X}, Top:{point.Y}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Left = $"{point.X}px";
        Settings.Top = $"{point.Y}px";

        InvokeAsync(SaveStateAsync);
    }

    void OnResize(System.Drawing.Size size)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog resize. Width:{size.Width}, Height:{size.Height}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Width = $"{size.Width}px";
        Settings.Height = $"{size.Height}px";

        InvokeAsync(SaveStateAsync);
    }

    DialogSettings _settings;
    public DialogSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "DialogSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DialogSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "DialogSettings", JsonSerializer.Serialize<DialogSettings>(Settings));
    }

    public class DialogSettings
    {
        public string Left { get; set; }
        public string Top { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }
    }

    private void ShowNotification(NotificationSeverity severity, string summary, string detail)
    {
        NotificationService.Notify(new NotificationMessage
            {
                Severity = severity,
                Summary = summary,
                Detail = detail,
                Duration = NotificationDuration
            });
    }

    private void CreateProvider()
    {
        navigationManager.NavigateTo("/editprovider");
    }

    private void EditProvider(int id)
    {
        navigationManager.NavigateTo($"/editprovider/{id}");
    }
}
