@page "/manage-providers-invoices"
@using Microsoft.Extensions.Localization
@using Radzen.Blazor
@using Radzen
@using System.Globalization
@using TunNetCom.SilkRoadErp.Sales.Contracts.Customers
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Requests
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Responses
@using TunNetCom.SilkRoadErp.Sales.Contracts.RecieptNotes
@using TunNetCom.SilkRoadErp.Sales.Contracts.Invoice
@using TunNetCom.SilkRoadErp.Sales.Contracts.ProviderInvoice
@using TunNetCom.SilkRoadErp.Sales.Contracts.Sorting
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Customers
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.DeliveryNote
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Providers
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Invoices
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.ReceiptNote
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.ProviderInvoice

@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using TunNetCom.SilkRoadErp.Sales.WebApp.Helpers
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine.Reports.Invoices.PrintInvoiceWithDetails
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine.Reports.Invoices.ProviderInvoices
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine.Reports.Invoices.RetenueSource
@using TunNetCom.SilkRoadErp.Sales.WebApp.PrintEngine.Reports.Invoices.RetenueSourceFournisseur
@inject IReceiptNoteApiClient receiptNoteService
@inject IProvidersApiClient providersService
@inject ICustomersApiClient customerService
@inject IInvoicesApiClient invoicesService
@inject IDeliveryNoteApiClient deliveryNoteService
@inject IProviderInvoiceApiClient providerInvoiceService
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> Localizer
@inject ToastService toastService
@inject NotificationService NotificationService
@inject PrintRetenuSourceService PrintRetenuSourceService
@inject PrintProviderFullInvoiceService PrintProviderFullInvoiceService
@inject RetenuSourceFournisseurPrintService RetenuSourceFournisseurPrintService
@inject PrintFullInvoiceService PrintFullInvoiceService
@inject IJSRuntime JS

<div style="padding: 1.5rem; background-color: #f5f6f8; min-height: 100vh;">
    <!-- Header -->
    <h3 style="font-size: 1.75rem; font-weight: 600; color: #1a1a1a; margin-bottom: 1.5rem;">
        @Localizer["manage_providers_invoices"]
    </h3>

    <!-- Navigation Bar (Dropdown only) -->
    <!-- Centered Provider Selection Card -->
    <div style="display: flex; justify-content: center; margin-bottom: 1.5rem;">
        <div style="width: 100%; max-width: 800px;">
            <RadzenCard Variant="Variant.Flat"
                        Style="background: #ffffff;
                           padding: 1.25rem;
                           border-radius: 12px;
                           box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
                           border: 1px solid #f0f0f0;">
                <RadzenRow JustifyContent="JustifyContent.Center">
                    <RadzenColumn Size="12" SizeMD="8" SizeLG="6">
                        <div style="display: flex; flex-direction: column; gap: 0.75rem;">
                            <label style="font-weight: 600;
                                  color: #333;
                                  font-size: 0.9rem;
                                  text-align: center;">
                                @Localizer["select_provider"]
                            </label>
                            <RadzenDropDownDataGrid AllowClear="true"
                                                    IsLoading="@isLoadingProviders"
                                                    @bind-Value="@SelectedProviderId"
                                                    AllowFiltering="true"
                                                    Style="width: 100%;
                                                   border-radius: 8px;
                                                   border: 1px solid #e0e0e0;
                                                   transition: all 0.2s ease;"
                                                    LoadData="LoadProviders"
                                                    Data="@_providersList"
                                                    TextProperty="@nameof(ProviderResponse.Nom)"
                                                    ValueProperty="@nameof(ProviderResponse.Id)"
                                                    Placeholder="@Localizer["select_provider"]"
                                                    Class="custom-dropdown">
                                <Columns>
                                    <RadzenDropDownDataGridColumn Property="@nameof(ProviderResponse.Id)"
                                                                  Title="ID"
                                                                  Width="100px" />
                                    <RadzenDropDownDataGridColumn Property="@nameof(ProviderResponse.Nom)"
                                                                  Title="Name"
                                                                  Width="300px" />
                                </Columns>
                            </RadzenDropDownDataGrid>
                        </div>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenCard>
        </div>
    </div>

    <!-- Main Content -->
    <RadzenRow Gap="1.5rem">
	    <!-- Invoices Section -->
	    <RadzenColumn Size="12" SizeMD="6" SizeLG="6">
		    <RadzenCard Variant="Variant.Flat" Style="background-color: #ffffff; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
			    <RadzenDataGrid @ref="ProviderInvoiceGrid"
			                    AllowFiltering="true"
			                    AllowPaging="true"
			                    PageSize="_defaultPageSize"
			                    PagerHorizontalAlign="HorizontalAlign.Left"
			                    ShowPagingSummary="true"
			                    AllowSorting="true"
			                    Data="@_invoicesList.Invoices.Items"
			                    LoadData="@LoadInvoices"
			                    @bind-Value="@SelectedInvoices"
			                    Count="_invoicesList.Invoices.TotalCount"
			                    SelectionMode="DataGridSelectionMode.Single"
			                    Style="border: none;"
			                    Class="custom-grid">
				    <EmptyTemplate>
					    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
				    </EmptyTemplate>
				    <HeaderTemplate>
					    <div style="font-size: 1.25rem; font-weight: 600; color: #1a1a1a; padding-bottom: 1rem;">
						    @Localizer["provider_invoice_details"]
					    </div>
				    </HeaderTemplate>
				    <Columns>
					    <RadzenDataGridColumn Property="@nameof(ProviderInvoiceResponse.Num)" Title="@Localizer["invoice_number"]" Width="140px" />
					    <RadzenDataGridColumn Property="@nameof(ProviderInvoiceResponse.Date)" Title="@Localizer["date"]" FormatString="{0:d}" Width="140px" />
					    <RadzenDataGridColumn Property="@nameof(ProviderInvoiceResponse.TotTTC)" Title="@Localizer["total_incl_tax"]" Width="140px">
						    <Template Context="detail">
							    @detail.TotTTC.FormatAmount()
						    </Template>
					    </RadzenDataGridColumn>
				    </Columns>
			    </RadzenDataGrid>
			    <!-- Invoice Summary -->
			    <div style="margin-bottom: 1.5rem;">
				    <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="1.5rem" JustifyContent="JustifyContent.End" Style="margin-top: 1rem;">
					    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
						    @Localizer["total_net"]: <strong>@_invoicesList.TotalNetAmount.FormatAmount()</strong>
					    </RadzenText>
					    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
						    @Localizer["total_gross"]: <strong>@_invoicesList.TotalGrossAmount.FormatAmount()</strong>
					    </RadzenText>
					    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
						    @Localizer["total_vat"]: <strong>@_invoicesList.TotalVATAmount.FormatAmount()</strong>
					    </RadzenText>
				    </RadzenStack>
			    </div>
			    <div style="display: flex; gap: 1rem; flex-wrap: wrap; margin-top: 1.5rem; margin-bottom: 1rem;">
				    <RadzenButton ButtonStyle="ButtonStyle.Light"
				                  Size="ButtonSize.Small"
				                  Style="padding: 0.25rem 0.75rem; border-radius: 4px;"
				                  Click="@PrintRetenuSourceClick">
					    <div style="display: flex; align-items: center; gap: 0.5rem;">
						    <RadzenIcon Icon="description" Style="font-size: 14px;" />
						    <span style="font-size: 0.85rem;">Retenu</span>
					    </div>
				    </RadzenButton>
				    <RadzenButton ButtonStyle="ButtonStyle.Light"
				                  Size="ButtonSize.Small"
				                  Style="padding: 0.25rem 0.75rem; border-radius: 4px;"
				                  Click="@PrintInvoiceClick">
					    <div style="display: flex; align-items: center; gap: 0.5rem;">
						    <RadzenIcon Icon="get_app" Style="font-size: 14px;" />
						    <span style="font-size: 0.85rem;">Facture</span>
					    </div>
				    </RadzenButton>
			    </div>
		    </RadzenCard>
	    </RadzenColumn>

	    <!-- Uninvoiced Delivery Notes Section -->
	    <RadzenColumn Size="12" SizeMD="6" SizeLG="6">
		    <RadzenCard Variant="Variant.Flat" Style="background-color: #ffffff; padding: 1.5rem; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);">
			    <RadzenDataGrid @ref="_receiptNoteGrid"
			                    AllowRowSelectOnRowClick="true"
			                    AllowFiltering="true"
			                    FilterPopupRenderMode="PopupRenderMode.OnDemand"
			                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
			                    AllowPaging="true"
			                    PagerHorizontalAlign="HorizontalAlign.Left"
			                    ShowPagingSummary="true"
			                    PageSize="_defaultPageSize"
			                    AllowSorting="true"
			                    Count="@_uninvoicedReceiptNotesWithSummary.ReceiptNotes.TotalCount"
			                    Data="@_uninvoicedReceiptNotesWithSummary.ReceiptNotes.Items"
			                    LoadData="LoadUninvoicedReceiptNote"
			                    IsLoading="@isLoadingUninvoicedDeliveryNotes"
			                    SelectionMode="DataGridSelectionMode.Multiple"
			                    @bind-Value="@_selectedReceiptNotesToAttach"
			                    Style="border: none;"
			                    Class="custom-grid">
				    <EmptyTemplate>
					    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
				    </EmptyTemplate>
				    <HeaderTemplate>
					    <div style="font-size: 1.25rem; font-weight: 600; color: #1a1a1a; padding-bottom: 1rem;">
						    @Localizer["uninvoiced_receipt_notes_details"]
					    </div>
				    </HeaderTemplate>
				    <Columns>
					    <RadzenDataGridColumn Property="@nameof(ReceiptNoteDetailsResponse.Num)" Title="@Localizer["number"]" Width="140px" />
					    <RadzenDataGridColumn Property="@nameof(ReceiptNoteDetailsResponse.TotHTva)" Title="@Localizer["total_ex_tax"]" Width="140px">
						    <Template Context="detail">
							    @detail.TotTTC.FormatAmount()
						    </Template>
					    </RadzenDataGridColumn>
					    <RadzenDataGridColumn Property="@nameof(ReceiptNoteDetailsResponse.TotTTC)" Title="@Localizer["net_payer"]" Width="140px">
						    <Template Context="detail">
							    @detail.TotTva.FormatAmount()
						    </Template>
					    </RadzenDataGridColumn>
				    </Columns>
			    </RadzenDataGrid>
			    <!-- Uninvoiced Delivery Notes Summary -->
			    <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="1.5rem" JustifyContent="JustifyContent.End" Style="margin-top: 1rem;">
				    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
					    @Localizer["total_net"]: <strong>@_uninvoicedReceiptNotesWithSummary?.TotalNetAmount.FormatAmount()</strong>
				    </RadzenText>
				    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
					    @Localizer["total_gross"]: <strong>@_uninvoicedReceiptNotesWithSummary?.TotalGrossAmount.FormatAmount()</strong>
				    </RadzenText>
				    <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: #555;">
					    @Localizer["total_vat"]: <strong>@_uninvoicedReceiptNotesWithSummary?.TotalVATAmount.FormatAmount()</strong>
				    </RadzenText>
			    </RadzenStack>
			    <RadzenButton Click="@(args => AttachReceiptNotesToInvoiceClick("Primary button"))"
			                  Text="@Localizer["attach_receipt_note_to_invoice"]"
			                  Disabled="@(SelectedInvoiceId == 0 || !_selectedReceiptNotesToAttach.Any())"
			                  ButtonStyle="ButtonStyle.Primary"
			                  Style="margin-top: 1rem; border-radius: 6px; padding: 0.5rem 1rem; font-weight: 500;" />
		    </RadzenCard>
	    </RadzenColumn>
    </RadzenRow>
    </div>
    <style>

    .custom-dropdown {
        --rz-dropdown-border-hover: #4f46e5;
        --rz-dropdown-shadow: 0 2px 10px rgba(102, 126, 234, 0.1);
    }
        .custom-dropdown .rz-dropdown-panel {
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border: 1px solid #e5e7eb;
        }

        .custom-dropdown .rz-dropdown-item:hover {
            background: #f9fafb;
        }
        .custom-dropdown:hover {
            border-color: #007bff;
        }

    .custom-grid .rz-datatable {
        border: none !important;
        background-color: transparent;
    }

    .custom-grid .rz-datatable-thead {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e0e0e0;
    }

    .custom-grid .rz-datatable-tbody tr:hover {
        background-color: #f1f3f5;
    }

</style>
@code {
    #region Fields and Properties
    private const int _defaultPageSize = 7;
    private const int _minValueId = 0;
    private int _selectedCustomerId;
    private int SelectedCustomerId
    {
        get => _selectedCustomerId;
        set
        {
            if (_selectedCustomerId != value)
            {
                _selectedCustomerId = value;
                SelectedInvoiceId = _minValueId;
                SelectedInvoice = new List<ProviderInvoiceResponse>();
                _invoicesList = new GetProviderInvoicesWithSummary();
                _uninvoicedReceiptNotesWithSummary = new ReceiptNotesWithSummaryResponse();
                _invoicedReceiptNotesWithSummary = new ReceiptNotesWithSummaryResponse();
                if (value > _minValueId)
                {
                    _ = LoadUninvoicedReceiptNote(value);
                    _ = LoadInvoices(value);
                }
            }
        }
    }
    private int _selectedProviderId;
    private int SelectedProviderId
    {
        get => _selectedProviderId;
        set
        {
            if (_selectedProviderId != value)
            {
                _selectedProviderId = value;
                SelectedInvoiceId = _minValueId;
                SelectedInvoice = new List<ProviderInvoiceResponse>();
                _invoicesList = new GetProviderInvoicesWithSummary();
                _uninvoicedReceiptNotesWithSummary = new ReceiptNotesWithSummaryResponse();
                _invoicedReceiptNotesWithSummary = new ReceiptNotesWithSummaryResponse();
                if (value > _minValueId)
                {
                    _ = LoadUninvoicedReceiptNote(value);
                    _ = LoadInvoices(value);
                }
            }
        }
    }
    private int _selectedInvoiceId;
    private int SelectedInvoiceId
    {
        get => _selectedInvoiceId;
        set
        {
            if (_selectedInvoiceId != value)
            {
                _selectedInvoiceId = value;
                _ = LoadReceiptNotesForSelectedInvoice(value);
            }
        }
    }
    private IList<ProviderInvoiceResponse> SelectedInvoice { get; set; } = new List<ProviderInvoiceResponse>();
    private IList<ProviderInvoiceResponse> _selectedInvoices = new List<ProviderInvoiceResponse>();
    private IList<ProviderInvoiceResponse> SelectedInvoices
    {
        get => _selectedInvoices;
        set
        {
            _selectedInvoices = value;
            SelectedInvoiceId = _selectedInvoices?.FirstOrDefault()?.Num ?? _minValueId;
            var selectedInvoice = _selectedInvoices?.FirstOrDefault();
            _ = LoadReceiptNotesForSelectedInvoice(selectedInvoice?.Num ?? _minValueId);
        }
    }

    bool isLoadingProviders = false;
    bool isLoadingInvoices = false;
    bool isLoadingDeliveryNotesInCurrentInvoice = false;
    bool isLoadingUninvoicedDeliveryNotes = false;
    private IList<ProviderResponse> _providersList = new List<ProviderResponse>();
    private IList<ReceiptNoteDetailsResponse> _selectedReceiptNotesIdsToDetach = new List<ReceiptNoteDetailsResponse>();
    private IList<ReceiptNoteDetailsResponse> _selectedReceiptNotesToAttach { get; set; } = new List<ReceiptNoteDetailsResponse>();
    private CancellationTokenSource _cancellationTokenSource = new();
    private RadzenDataGrid<ReceiptNoteDetailsResponse> _receiptNoteGrid;
    private RadzenDataGrid<ProviderInvoiceResponse> ProviderInvoiceGrid;
    private GetProviderInvoicesWithSummary _invoicesList = new GetProviderInvoicesWithSummary();
    private ReceiptNotesWithSummaryResponse _uninvoicedReceiptNotesWithSummary = new ReceiptNotesWithSummaryResponse();
    private ReceiptNotesWithSummaryResponse _invoicedReceiptNotesWithSummary = new ReceiptNotesWithSummaryResponse();

    private IList<ReceiptNoteDetailsResponse> _selectedReceiptNotesToDetach
    {
        get => _selectedReceiptNotesIdsToDetach;
        set => _selectedReceiptNotesIdsToDetach = value;
    }
    #endregion

    #region Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await SearchProviders();
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
    #endregion

    #region Data Loading Methods (Commented Out)

    private async Task LoadProviders(LoadDataArgs args)
    {
        isLoadingProviders = true;
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = _defaultPageSize,
            SearchKeyword = args.Filter
            };

        try
        {
            var pagedProviders = await providersService.GetPagedAsync(parameters, _cancellationTokenSource.Token);
            _providersList = pagedProviders.Items;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"Failed to load providers: {ex.Message}"
                });
            _providersList = new List<ProviderResponse>();
        }

        isLoadingProviders = false;
        await InvokeAsync(StateHasChanged);
    }
    private async Task SearchProviders()
    {
        var parameters = new QueryStringParameters
            {
                PageNumber = 1,
                PageSize = _defaultPageSize,
                SearchKeyword = null
            };

        var pagedProviders = await providersService.GetPagedAsync(parameters, _cancellationTokenSource.Token);
        _providersList = pagedProviders.Items;
        await InvokeAsync(StateHasChanged);
    }
    private async Task LoadUninvoicedReceiptNote(LoadDataArgs args)
    {
        string _sortProperty = null;
        string _sortOrder = null;
        if (args.Sorts != null && args.Sorts.Any())
        {
            var sort = args.Sorts.First();
            _sortProperty = sort.Property;
            _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
        }
        var parameters = new QueryStringParameters
            {
                PageNumber = (args.Skip.Value / _defaultPageSize) + 1,
                PageSize = _defaultPageSize,
                SearchKeyword = args.Filter,
                SortOrder = _sortOrder,
                SortProprety = _sortProperty
            };
        var repi = await receiptNoteService.GetReceiptNoteWithSummaries(SelectedProviderId, false, null, parameters, _cancellationTokenSource.Token);

		if (repi.IsSuccess)
            _uninvoicedReceiptNotesWithSummary = repi.Value;
        await InvokeAsync(StateHasChanged);
    }
    private async Task LoadInvoicedReceiptNote(LoadDataArgs args)
    {
        string _sortProperty = null;
        string _sortOrder = null;
        if (args.Sorts != null && args.Sorts.Any())
        {
            var sort = args.Sorts.First();
            _sortProperty = sort.Property;
            _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
        }
        var parameters = new QueryStringParameters
            {
                PageNumber = (args.Skip.Value / _defaultPageSize) + 1,
                PageSize = _defaultPageSize,
                SearchKeyword = args.Filter,
                SortOrder = _sortOrder,
                SortProprety = _sortProperty
            };
        var repi = await receiptNoteService.GetReceiptNoteWithSummaries(SelectedProviderId, false, null, parameters, _cancellationTokenSource.Token);
		if (repi.IsSuccess)
            _uninvoicedReceiptNotesWithSummary = repi.Value;
        await InvokeAsync(StateHasChanged);
    }
    private async Task LoadUninvoicedReceiptNote(int _provider)
    {
        var parameters = new QueryStringParameters
			{
				PageNumber = 1,
				PageSize = _defaultPageSize,
				SearchKeyword = null
			};
        var repi = await receiptNoteService.GetReceiptNoteWithSummaries(_provider, false, null, parameters, _cancellationTokenSource.Token);
		if (repi.IsSuccess)
            _uninvoicedReceiptNotesWithSummary = repi.Value;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadInvoices(LoadDataArgs args)
    { 
        string _sortProperty = null;
        string _sortOrder = null;
        if (args.Sorts != null && args.Sorts.Any())
        {
            var sort = args.Sorts.First();
            _sortProperty = sort.Property;
            _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
        }
        var query = new QueryStringParameters
			{
				PageNumber = (args.Skip.Value / _defaultPageSize) + 1,
				PageSize = _defaultPageSize,
				SearchKeyword = args.Filter,
                SortOrder = _sortOrder,
                SortProprety = _sortProperty
			};
        var invoices = await providerInvoiceService.GetProvidersInvoicesAsync(SelectedProviderId, query, default);
        if (invoices.IsT1)
        {
            NotificationService.Notify(new NotificationMessage
				{
					Severity = NotificationSeverity.Error,
					Summary = Localizer["error"],
					Detail = invoices.AsT1.Detail
				});
            return;
        }
        _invoicesList = invoices.AsT0;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadInvoices(int providerId)
    {
        var query = new QueryStringParameters
			{
				PageNumber = 1,
				PageSize = _defaultPageSize,
				SearchKeyword = null
			};
        var invoices = await providerInvoiceService.GetProvidersInvoicesAsync(providerId, query , default);
        if (invoices.IsT1)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["error"],
                    Detail = invoices.AsT1.Detail
                });
            return;
        }
        _invoicesList = invoices.AsT0;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadReceiptNotesForSelectedInvoice(int invoiceNum)
    {

        var parameters = new QueryStringParameters
            {
                PageNumber =  1,
                PageSize = _defaultPageSize,
                SearchKeyword = null
            };
        var repi = await receiptNoteService.GetReceiptNoteWithSummaries(SelectedProviderId, true, invoiceNum, parameters, _cancellationTokenSource.Token);
        if(repi.IsSuccess)
        {
            _invoicedReceiptNotesWithSummary = repi.Value;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadReceiptNotesForSelectedInvoice(LoadDataArgs args)
    {
        string _sortProperty = null;
        string _sortOrder = null;
        if (args.Sorts != null && args.Sorts.Any())
        {
            var sort = args.Sorts.First();
            _sortProperty = sort.Property;
            _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
        }
        var parameters = new QueryStringParameters
            {
                PageNumber = (args.Skip.Value / _defaultPageSize) + 1,
                PageSize = _defaultPageSize,
                SearchKeyword = args.Filter,
                SortOrder = _sortOrder,
                SortProprety = _sortProperty
            };
        var repi = await receiptNoteService.GetReceiptNoteWithSummaries(SelectedProviderId, true, SelectedInvoiceId, parameters, _cancellationTokenSource.Token);
		if (repi.IsSuccess)
            _invoicedReceiptNotesWithSummary = repi.Value;
        await InvokeAsync(StateHasChanged);
    }


    private async Task DetachReceiptNotesFromInvoice()
    {
        try
        {
            var deliveryNoteIds = _selectedReceiptNotesIdsToDetach.Select(dn => dn.Num).ToList();

            var result = receiptNoteService.DetachReceiptNotesFromInvoiceAsync(SelectedInvoiceId, deliveryNoteIds, _cancellationTokenSource.Token);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = Localizer["success"],
                    Detail = Localizer["receipt_notes_detached"]
                });
            await LoadInvoices(SelectedProviderId);
            await LoadUninvoicedReceiptNote(SelectedProviderId);
            await LoadReceiptNotesForSelectedInvoice(SelectedInvoiceId);

            _selectedReceiptNotesIdsToDetach = new List<ReceiptNoteDetailsResponse>();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["error"],
                    Detail = ex.Message
                });
            Console.WriteLine($"Error detaching receipt notes from invoice: {ex.Message}");
        }
    }
    private async Task AttachReceiptNotesToInvoiceClick(string text)
    {
        if (SelectedInvoiceId > _minValueId && _selectedReceiptNotesToAttach?.Any() == true)
        {
            var deliveryNoteIds = _selectedReceiptNotesToAttach.Select(dn => dn.Num).ToList();
            var attachToInvoiceRequest = new AttachToInvoiceRequest
                {
                    InvoiceId = SelectedInvoiceId,
                    DeliveryNoteIds = deliveryNoteIds
                };

            var result = await receiptNoteService.AttachReceiptNotesToInvoiceAsync(SelectedInvoiceId, deliveryNoteIds, _cancellationTokenSource.Token);

            if (result)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = Localizer["success"],
                        Detail = Localizer["receipt_notes_attached"]
                    });

                _selectedReceiptNotesToAttach = new List<ReceiptNoteDetailsResponse>();

                await LoadInvoices(SelectedProviderId);
                await LoadUninvoicedReceiptNote(SelectedProviderId);
                await LoadReceiptNotesForSelectedInvoice(SelectedInvoiceId);

            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = Localizer["error"]
                    });
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = Localizer["warning"],
                    Detail = Localizer["select_invoice_and_receipt_notes"]
                });
        }
    }

    #endregion

    #region Print methods
    private async Task PrintRetenuSourceClick()
    {
        if (SelectedInvoiceId <= _minValueId)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = Localizer["warning"],
                    Detail = Localizer["select_invoice"]
                });
            return;
        }
        // Print functionality commented out for display-only version

        var invoices = new List<int>() { SelectedInvoiceId };
        var pdfBytes = await RetenuSourceFournisseurPrintService
        .GenerateRetenuSourcePdfAsync(invoices, cancellationToken: _cancellationTokenSource.Token);
        var fileName = $"Retenu à la source {SelectedInvoiceId}.pdf";
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes.Value), "application/pdf");

    }

    private async Task PrintInvoiceClick()
    {
        // Show notification if no invoice selected
        if (SelectedInvoiceId <= _minValueId)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = Localizer["warning"],
                    Detail = Localizer["select_invoice"]
                });
            return;
        }
        // Print functionality commented out for display-only version
        
        var invoices = new List<int>() { SelectedInvoiceId };
        var pdfBytes = await PrintProviderFullInvoiceService
        .GenerateInvoicePdfAsync(SelectedInvoiceId, cancellationToken: _cancellationTokenSource.Token);
        var fileName = $"Invoice {SelectedInvoiceId}.pdf";
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(pdfBytes.Value), "application/pdf");
        
    }
    #endregion
}