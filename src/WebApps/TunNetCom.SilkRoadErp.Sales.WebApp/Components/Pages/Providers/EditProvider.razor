@page "/editprovider/{Id:int?}"
@using TunNetCom.SilkRoadErp.Sales.Contracts.Providers
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Providers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Helpers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using System.Globalization
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services
@inject IProvidersApiClient providerService
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> localizer

<RadzenCard Style="padding: 20px; max-width: 900px; margin: auto;">
    <RadzenTemplateForm Data="@provider" Submit="@OnSubmit">
        <h3 class="mb-4">@(provider.Id == 0 ? localizer["add_provider"] : localizer["edit_provider"])</h3>

        <RadzenRow Class="g-4 mb-4">

            <!-- Left Column -->
            <RadzenColumn Size="12" SizeSM="6" Class="d-flex flex-column gap-3">
                <RadzenFormField Text="@localizer["provider_name"]">
                    <Start><RadzenIcon Icon="person" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.Nom" Name="Nom" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="@localizer["provider_phone"]">
                    <Start><RadzenIcon Icon="call" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.Tel" Name="Tel" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="@localizer["provider_fax"]">
                    <Start><RadzenIcon Icon="print" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.Fax" Name="Fax" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="@localizer["provider_matricule"]">
                    <Start><RadzenIcon Icon="badge" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.Matricule" Name="Matricule" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="@localizer["provider_etb_sec"]">
                    <Start><RadzenIcon Icon="business" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.EtbSec" Name="EtbSec" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>
            </RadzenColumn>

            <!-- Right Column -->
            <RadzenColumn Size="12" SizeSM="6" Class="d-flex flex-column gap-3">
                <RadzenFormField Text="@localizer["provider_code"]">
                    <Start><RadzenIcon Icon="code" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.Code" Name="Code" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="@localizer["provider_code_cat"]">
                    <Start><RadzenIcon Icon="category" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.CodeCat" Name="CodeCat" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="@localizer["provider_email"]">
                    <Start><RadzenIcon Icon="email" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.Mail" Name="Mail" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="@localizer["provider_second_email"]">
                    <Start><RadzenIcon Icon="email" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.MailDeux" Name="MailDeux" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>

                <RadzenFormField Text="@localizer["provider_adress"]">
                    <Start><RadzenIcon Icon="home" /></Start>
                    <ChildContent><RadzenTextBox @bind-Value="provider.Adresse" Name="Adresse" Style="width: 100%;" /></ChildContent>
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>

        <!-- Toggle Button -->
        <RadzenStack Orientation="Radzen.Orientation.Horizontal"
                     JustifyContent="JustifyContent.Center"
                     AlignItems="AlignItems.Center"
                     Gap="1rem"
                     Class="mb-4">
            <RadzenLabel Text="@localizer["provider_constructor"]" />
            <RadzenToggleButton @bind-Value="provider.Constructeur"
                                TValue="bool"
                                Text="@(provider.Constructeur ? localizer["True"] : localizer["False"])"
                                Icon="@(provider.Constructeur ? "check_circle" : "cancel")"
                                ButtonStyle="ButtonStyle.Danger"
                                ToggleButtonStyle="ButtonStyle.Success"
                                Style="min-width: 150px;"
                                InputAttributes="@(new Dictionary<string, object> { { "aria-label", localizer["provider_constructor"] } })" />
        </RadzenStack>

        <RadzenRow>
            <RadzenColumn Width="12" Style="text-align: right;">
                <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                              Text="@localizer["save_label"]"
                              Icon="save"
                              Style="margin-right: 10px;" />
                <RadzenButton Text="@localizer["cancel_label"]"
                              Click="@Cancel"
                              ButtonStyle="ButtonStyle.Danger"
                              Icon="close" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenTemplateForm>
</RadzenCard>

@code {
        [Parameter] public int? Id { get; set; }
        [Inject] protected ToastService toastService { get; set; } = default!;
        [Inject] protected DialogService dialogService { get; set; } = default!;
        private ProviderResponse provider = new ProviderResponse();
        private CancellationTokenSource cancellationTokenSource = new();
        private EventCallback<ProviderResponse> OnSubmit => EventCallback.Factory.Create<ProviderResponse>(this, HandleValidSubmit);
        private ButtonStyle ToggleButtonStyle => provider.Constructeur ? ButtonStyle.Success : ButtonStyle.Danger;


    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var providerResult = await providerService.GetAsync(Id.Value, cancellationTokenSource.Token);
            if (providerResult.IsT0)
            {
                provider = providerResult.AsT0;
                return;
            }

            navigationManager.NavigateTo("/Error");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (provider.Id == 0)
        {
            var createProviderResult = await providerService.CreateAsync(
                new CreateProviderRequest
                    {
                        Nom = provider.Nom,
                        Tel = provider.Tel,
                        Fax = provider.Fax,
                        Matricule = provider.Matricule,
                        Code = provider.Code,
                        CodeCat = provider.CodeCat,
                        EtbSec = provider.EtbSec,
                        Mail = provider.Mail,
                        MailDeux = provider.MailDeux,
                        Constructeur = provider.Constructeur,
                        Adresse = provider.Adresse
                    },
                    cancellationTokenSource.Token);

            if (createProviderResult.IsT0)
            {
                toastService.Notify(new(ToastType.Success, $"{localizer["provider"]} {localizer["created_with_success"]}"));
                navigationManager.NavigateTo("/providers_list");
                return;
            }

            await ShowErrorsDialog(createProviderResult.AsT1.ToErrorsList());
            return;
        }
        var updateProviderResult = await providerService.UpdateAsync(
           new UpdateProviderRequest
               {
                   Nom = provider.Nom,
                   Tel = provider.Tel,
                   Fax = provider.Fax,
                   Matricule = provider.Matricule,
                   Code = provider.Code,
                   CodeCat = provider.CodeCat,
                   EtbSec = provider.EtbSec,
                   Mail = provider.Mail,
                   MailDeux = provider.MailDeux,
                   Constructeur = provider.Constructeur,
                   Adresse = provider.Adresse
               }, provider.Id,
           cancellationTokenSource.Token);

        if (updateProviderResult.IsT0)
        {
            toastService.Notify(new(ToastType.Success, $"{localizer["provider"]} {localizer["updated_with_success"]}"));
            navigationManager.NavigateTo("/providers_list");
            return;
        }

        await ShowErrorsDialog(updateProviderResult.AsT1.ToErrorsList());
    }
    private void Cancel()
    {
        navigationManager.NavigateTo("/providers_list");
    }

    private async Task ShowErrorsDialog(List<string> errorList)
    {
        await dialogService.OpenAsync("Validation Errors", ds => @<div style="padding:10px;">
        <ul style="margin:0; padding-left: 20px;">
            @foreach (var error in errorList)
        {
            <li>@error</li>
        }
        </ul>
    </div>, new DialogOptions()
          {
              CloseDialogOnOverlayClick = true,
              Draggable = true,
              Resizable = true
          });
    }
}
