@page "/AddOrUpdateDeliveryNote"
@page "/AddOrUpdateDeliveryNote/{num?}"

@using Radzen.Blazor
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@using System.Text.Json
@using TunNetCom.SilkRoadErp.Sales.Contracts.AppParameters
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Requests
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Responses
@using TunNetCom.SilkRoadErp.Sales.Contracts.Sorting
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.AppParameters
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Customers
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.DeliveryNote
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Invoices
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Products
@using TunNetCom.SilkRoadErp.Sales.WebApp.Helpers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales

@inject IStringLocalizer<SharedResource> Localizer
@inject ToastService toastService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject IDeliveryNoteApiClient deliveryNoteApiClient
@inject IProductsApiClient productsApiClient
@inject IInvoicesApiClient invoicesApiClient
@inject ICustomersApiClient customersApiClient
@inject IAppParametersClient appParametersClient
@inject ILogger<AddOrUpdateDeliveryNote> logger
@inject DialogService DialogService

<style>
    .delivery-note-container {
        display: grid;
        gap: 16px;
        margin-bottom: 20px;
        background-color: #ffffff;
        padding: 24px;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }

    .delivery-note-form {
        display: flex;
        gap: 12px;
        align-items: center;
        flex-wrap: wrap;
        flex-grow: 1;
        margin-top: 24px;
        pointer-events: auto !important;
    }

    .header-actions {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        align-items: center;
        justify-content: space-between;
        padding: 12px 24px;
        padding-top: 40px;
        background-color: #ffffff;
        border-bottom: 1px solid #e5e7eb;
        width: 100%;
    }

    .action-buttons {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        align-items: center;
    }

    .action-button {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 13px;
        font-weight: 500;
        padding: 8px 12px;
        border-radius: 6px;
        transition: background-color 0.2s, box-shadow 0.2s;
        color: #ffffff;
        background-color: #3b82f6;
        border: none;
        pointer-events: auto !important;
    }

        .action-button:hover:not(:disabled) {
            background-color: #2563eb;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .action-button:disabled {
            background-color: #d1d5db;
            color: #6b7280;
            cursor: not-allowed;
        }

    .success-button {
        background-color: #10b981;
    }

        .success-button:hover:not(:disabled) {
            background-color: #059669;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

    .summary-card {
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        padding: 8px 16px;
        background-color: #f8fafc;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        flex: 0 0 auto;
    }

    .summary-stack {
        gap: 1.5rem;
    }

    .summary-text {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 13px;
        color: #1f2937;
        line-height: 1.5;
    }

        .summary-text strong {
            font-weight: 600;
            color: #111827;
        }

    @@media (max-width: 768px) {
        .header-actions

    {
        flex-direction: column;
        align-items: flex-start;
        padding: 12px 16px;
        gap: 12px;
    }

    .action-buttons {
        flex-direction: column;
        width: 100%;
        gap: 8px;
    }

    .action-button,
    .success-button {
        width: 100%;
        text-align: center;
        font-size: 12px;
        padding: 10px;
    }

    .summary-card {
        width: 100%;
        padding: 8px 12px;
    }

    .summary-stack {
        flex-direction: column;
        gap: 0.75rem;
        align-items: flex-start;
    }

    .summary-text {
        font-size: 12px;
    }

    .delivery-note-container {
        padding: 16px;
    }

    .delivery-note-form {
        gap: 8px;
        margin-top: 16px;
    }

    }
</style>

<!-- Loading Indicator -->
@if (isLoading)
{
    <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}
else
{
    <!-- Delivery Note Container with Form and Summary -->
    <div class="delivery-note-container">
        <div class="delivery-note-form">
	        <RadzenLabel Text="@Localizer["delivery_note_number"]" Component="DeliveryNoteNumber" AriaLabel="@Localizer["delivery_note_number"]" />
	        <RadzenTextBox @bind-Value="deliveryNoteNumber" Name="DeliveryNoteNumber" Style="width: 200px;" ReadOnly="true" AriaReadOnly="true" />

            <RadzenLabel Text="@Localizer["date"]" />
            <RadzenDatePicker @bind-Value="deliveryNoteDate" Name="DeliveryNoteDate" Style="width: 200px;" DateFormat="d MMMM yyyy" ShowTime="false" />

            <RadzenLabel Text="@Localizer["customer"]" />
            <RadzenDropDownDataGrid AllowClear="true"
            IsLoading="@isLoadingCustomers"
            @bind-Value="@selectedCustomerId"
            LoadData="@LoadCustomers"
            AllowFiltering="true"
            Style="width: 350px;"
            Data="@_filteredCustomers"
            TextProperty="@nameof(CustomerResponse.Name)"
            ValueProperty="@nameof(CustomerResponse.Id)"
            Placeholder="@Localizer["select_customer"]">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="@nameof(CustomerResponse.Id)" Title="ID" Width="80px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(CustomerResponse.Name)" Title="@Localizer["name"]" Width="220px" />
                </Columns>
            </RadzenDropDownDataGrid>

            <RadzenLabel Text="@Localizer["invoice_number"]" />
            <RadzenDropDownDataGrid AllowClear="true"
            IsLoading="@isLoadingInvoices"
            @bind-Value="@_selectedInvoiceId"
            LoadData="@LoadCustomerInvoices"
            AllowFiltering="true"
            Style="width: 350px;"
            Data="@_filteredInvoices"
            TextProperty="@nameof(InvoiceResponse.Number)"
            ValueProperty="@nameof(InvoiceResponse.Number)"
            Placeholder="@Localizer["select_invoice"]">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="@nameof(InvoiceResponse.Number)" Title="Num" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(InvoiceResponse.Date)" Title="Date" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(InvoiceResponse.TotalIncludingTaxAmount)" Title="@Localizer["tot_ttc"]" Width="200px" />
                </Columns>
            </RadzenDropDownDataGrid>
        </div>
    </div>

    <!-- DataGrid with Actions -->
    <RadzenDataGrid @ref="ordersGrid" AllowAlternatingRows="false"
    AllowPaging="true"
    EditMode="@editMode"
    Data="@orders" TItem="DeliveryNoteDetailResponse"
    RowUpdate="@OnUpdateRow"
    RowCreate="@OnCreateRow"
    Page="@Reset"
    ColumnWidth="200px">
        <HeaderTemplate>
    <div class="header-actions">
        <div class="action-buttons">
            <RadzenButton ButtonStyle="ButtonStyle.Success" 
                          Icon="add_circle" 
                          Text="@Localizer["add_new_order"]"
                          Click="@InsertRow" 
                          Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)"
                          class="action-button success-button"
                          AriaLabel="@Localizer["add_new_order"]" />

            <RadzenButton ButtonStyle="ButtonStyle.Primary"
                          Icon="print"
                          Text="@Localizer["print"]"
                          Variant="Variant.Flat"
                          Disabled="@(!orders.Any())"
                          class="action-button"
                          AriaLabel="@Localizer["print"]" />

            <RadzenButton ButtonStyle="ButtonStyle.Primary"
                          Icon="save"
                          Text="@Localizer["save"]"
                          Variant="Variant.Flat"
                          Click="@SaveDeliveryNote" 
                          Disabled="@(!orders.Any())"
                          class="action-button"
                          AriaLabel="@Localizer["save"]" />

            </div>

        <RadzenCard class="summary-card" Variant="Variant.Outlined">
            <RadzenStack Orientation="Radzen.Orientation.Horizontal" 
                         Gap="1.5rem" 
                         JustifyContent="JustifyContent.End"
                         class="summary-stack">
                <RadzenText TextStyle="TextStyle.Body1" class="summary-text">
                    @Localizer["total_net"]: <strong>@totalTtc.FormatAmount()</strong>
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" class="summary-text">
                    @Localizer["total_gross"]: <strong>@totalHt.FormatAmount()</strong>
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" class="summary-text">
                    @Localizer["total_vat"]: <strong>@totalVat.FormatAmount()</strong>
                </RadzenText>
            </RadzenStack>
        </RadzenCard>
    </div>
</HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Width="600px" TItem="DeliveryNoteDetailResponse"
            Property="@nameof(DeliveryNoteDetailResponse.ProductReferenceAndDescription)"
            Title="@Localizer["product"]">
                <Template Context="order">
                    @order.ProductReferenceAndDescription
                </Template>
                <EditTemplate Context="order">
                    <RadzenDropDownDataGrid Style="width: 100%; max-width: 600px;"
                    AllowClear="true"
                    @bind-Value="order.ProductReference"
                    LoadData="@LoadData"
                    AllowFiltering="true"
                    Data="@(GetCurrentProductList(order))"
                    Count="@count"
                    Change="@(args => OnProductSelected(order, args))"
                    TextProperty="@nameof(DeliveryNoteDetailResponse.ProductReferenceAndDescription)"
                    ValueProperty="@nameof(DeliveryNoteDetailResponse.ProductReference)"
                    Name="DropDownDataGridFilteringLoadData" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="100px" Property="@nameof(DeliveryNoteDetailResponse.Quantity)"
            Title="@Localizer["quantity"]">
                <EditTemplate Context="order">
                    <RadzenNumeric TValue="int"
                    Value="order.Quantity"
                    Change="@(args => OnValueChanged(order, args, nameof(order.Quantity)))"
                    Style="width:100%;"
                    Name="Quantity"/>
                    <RadzenRequiredValidator Text="@Localizer["quantity_required"]" Component="Quantity" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="150px" Property="@nameof(DeliveryNoteDetailResponse.UnitPriceExcludingTax)" Title="@Localizer["unit_price_ht"]">
                <Template Context="order">
                    <div @onclick="() => ShowDialog(order.ProductReference)">@order.UnitPriceExcludingTax.FormatAmount()</div>
                </Template>
                @* <EditTemplate Context="order"> *@
                @*     <RadzenNumeric TValue="decimal" *@
                @*                    Value="order.UnitPriceExcludingTax" *@
                @*                    Change="@(args => OnValueChanged(order, args, nameof(order.UnitPriceExcludingTax)))" *@
                @*                    Style="width:100%;" *@
                @*                    Format="n0" *@
                @*                    Name="UnitPriceExcludingTax" /> *@
                @*     <RadzenRequiredValidator Text="@Localizer["unit_price_required"]" Component="UnitPriceExcludingTax" Popup="true" /> *@
                @* </EditTemplate> *@
            </RadzenDataGridColumn>


            <RadzenDataGridColumn Width="100px" Property="@nameof(DeliveryNoteDetailResponse.DiscountPercentage)"
            Title="@Localizer["discount_percentage"]">
                <Template Context="order">
                    @order.DiscountPercentage
                </Template>
                @* <EditTemplate Context="order"> *@
                @*     <RadzenNumeric TValue="double" *@
                @*     Value="order.DiscountPercentage" *@
                @*     Change="@(args => OnValueChanged(order, args, nameof(order.DiscountPercentage)))" *@
                @*     Style="width:100%;" *@
                @*     FormatString="{0:N2}%" *@
                @*     Name="DiscountPercentage" /> *@
                @* </EditTemplate> *@
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="@nameof(DeliveryNoteDetailResponse.TotalExcludingTax)" Title="@Localizer["total_excluding_tax"]">
                <Template Context="order">
                    @order.TotalExcludingTax.FormatAmount()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="100px" Property="@nameof(DeliveryNoteDetailResponse.VatPercentage)" Title="@Localizer["vat_percentage"]">
                <Template Context="order">
                    @order.VatPercentage
                </Template>
                @* <EditTemplate Context="order"> *@
                @*     <RadzenNumeric TValue="double" *@
                @*     Value="order.VatPercentage" *@
                @*     Change="@(args => OnValueChanged(order, args, nameof(order.VatPercentage)))" *@
                @*     Style="width:100%;" *@
                @*     FormatString="{0:N2}%" *@
                @*     Name="VatPercentage" /> *@
                @*     <RadzenRequiredValidator Text="@Localizer["vat_required"]" Component="VatPercentage" Popup="true" /> *@
                @* </EditTemplate> *@
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="@nameof(DeliveryNoteDetailResponse.TotalIncludingTax)" Title="@Localizer["total_including_tax"]">
                <Template Context="order">
                    @order.TotalIncludingTax.FormatAmount()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
            Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                    Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                    Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                    Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                    Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                    Click="@(args => DeleteRow(order))" aria-label="Delete">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter] public string? num { get; set; }
    RadzenDataGrid<DeliveryNoteDetailResponse> ordersGrid;
    List<DeliveryNoteDetailResponse> orders;
    List<DeliveryNoteDetailResponse> searchList;
    int count;
    private const int DefaultPageSize = 7;
    private CancellationTokenSource _cancellationTokenSource = new();
    private List<CustomerResponse> _filteredCustomers { get; set; } = new();
    private List<InvoiceResponse> _filteredInvoices { get; set; } = new();
    List<KeyValuePair<int, string>> editedFields = new List<KeyValuePair<int, string>>();
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<DeliveryNoteDetailResponse> ordersToInsert = new List<DeliveryNoteDetailResponse>();
    List<DeliveryNoteDetailResponse> ordersToUpdate = new List<DeliveryNoteDetailResponse>();
    private bool isLoading = true;
    bool isLoadingCustomers = false;
    bool isLoadingInvoices = false;
    decimal totalHt;
    decimal totalVat;
    decimal totalTtc;
    string deliveryNoteNumber;
    DateTime deliveryNoteDate = DateTime.Now;
    private GetAppParametersResponse getAppParametersResponse;
    private int? _selectedCustomerId;
    int? selectedCustomerId
    {
        get => _selectedCustomerId;
        set
        {
            if (_selectedCustomerId != value)
            {
                _selectedCustomerId = value;
                selectedInvoiceId = null;
                _filteredInvoices = new List<InvoiceResponse>();
                _ = LoadCustomerInvoices(new LoadDataArgs());
                StateHasChanged();
            }
        }
    }

    private int? _selectedInvoiceId;
    int? selectedInvoiceId
    {
        get => _selectedInvoiceId;
        set
        {
            if (_selectedInvoiceId != value)
            {
                _selectedInvoiceId = value;
                StateHasChanged();
            }
        }
    }

    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(DeliveryNoteDetailResponse order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        searchList = new List<DeliveryNoteDetailResponse>();
        var param = await appParametersClient.GetAppParametersAsync(_cancellationTokenSource.Token);
        getAppParametersResponse = param.AsT0;
        await LoadCustomers(null);
        await FetchDeliveryNote();
        await LoadCustomerInvoices(null);
        isLoading = false;
    }

    private async Task SaveDeliveryNote()
    {
        try
        {
	        if (!_selectedCustomerId.HasValue )
	        {
		        NotificationService.Notify(new NotificationMessage
		        {
			        Severity = NotificationSeverity.Error,
			        Summary = Localizer["error"],
                        Detail = $"{Localizer["select_customer"]}"
		        });
		        return;
	        }
	        if (!_selectedCustomerId.HasValue )
	        {
		        NotificationService.Notify(new NotificationMessage
		        {
			        Severity = NotificationSeverity.Error,
			        Summary = Localizer["error"],
                        Detail = $"{Localizer["select_customer"]}"
		        });
		        return;
	        }
            isLoading = true;
            StateHasChanged();

            var request = new CreateDeliveryNoteRequest
            {
                Date = deliveryNoteDate,
                TotalExcludingTax = totalHt,
                TotalVat = totalVat,
                TotalAmount = totalTtc,
                DeliveryTime = TimeOnly.FromDateTime(DateTime.Now),
                InvoiceNumber = _selectedInvoiceId,
                CustomerId = _selectedCustomerId,
                Items = orders.Select(o => new DeliveryNoteItemRequest
                {
                    Id = o.Id,
                    ProductReference = o.ProductReference,
                    Description = o.Description,
                    Quantity = o.Quantity,
                    UnitPriceExcludingTax = o.UnitPriceExcludingTax,
                    // DiscountPercentage = o.DiscountPercentage,
                    TotalExcludingTax = o.TotalExcludingTax,
                    // VatPercentage = o.VatPercentage,
                    TotalIncludingTax = o.TotalIncludingTax
                }).ToList()
            };

            var response = await deliveryNoteApiClient.CreateDeliveryNoteAsync(request, _cancellationTokenSource.Token);

            if (response.IsSuccess)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = Localizer["success"],
                    Detail = Localizer["delivery_note_saved_successfully"]
                });

                // Update the delivery note number if this is a new note
                if (string.IsNullOrEmpty(deliveryNoteNumber))
                {
                    deliveryNoteNumber = response.ValueOrDefault.ToString();
                }
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["error"],
                    Detail = $"{Localizer["failed_to_save_delivery_note"]}: {response.Errors.First().Message}"
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_save_delivery_note"]}: {ex.Message}"
            });
            logger.LogError(ex, "Failed to save delivery note");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FetchDeliveryNote()
    {
        if (string.IsNullOrEmpty(num))
        {
            orders = new List<DeliveryNoteDetailResponse>();
            totalHt = 0;
            totalVat = 0;
            totalTtc = 0;
            return;
        }

        try
        {
            if (int.TryParse(num, out var numAsInt))
            {
                var deliveryNote = await deliveryNoteApiClient.GetDeliveryNoteByNumAsync(
                    numAsInt,
                    _cancellationTokenSource.Token);

                if (deliveryNote != null)
                {
                    deliveryNoteNumber = deliveryNote.DeliveryNoteNumber.ToString();
                    deliveryNoteDate = deliveryNote.Date;
                    selectedCustomerId = deliveryNote.CustomerId;
                    selectedInvoiceId = deliveryNote.InvoiceNumber;

                    if (deliveryNote.Items != null && deliveryNote.Items.Any())
                    {
                        orders = deliveryNote.Items;
                    }
                    else
                    {
                        orders = new List<DeliveryNoteDetailResponse>();
                    }

                    totalHt = deliveryNote.TotalExcludingTax;
                    totalVat = deliveryNote.TotalVat;
                    totalTtc = deliveryNote.TotalAmount;
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_fetch_delivery_note"]}: {e.Message}"
            });

            logger.LogError(e, "Failed to save delivery note");
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task EditRow(DeliveryNoteDetailResponse order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    async Task SaveRow(DeliveryNoteDetailResponse order)
    {
	    if (order.ProductReference == "" || order.Quantity < 1)
	    {
		    NotificationService.Notify(new NotificationMessage
		    {
			    Severity = NotificationSeverity.Error,
			    Summary = Localizer["error"],
			    Detail = $"{Localizer["input_error"]}"
		    });
		    return;
	    }
	    try
        {
            await ordersGrid.UpdateRow(order);
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_save_delivery_note"]}"
            });
            logger.LogError(e, "Failed to save delivery note");
        }
    }

    void CancelEdit(DeliveryNoteDetailResponse order)
    {
        Reset(order);
        ordersGrid.CancelEditRow(order);
    }

    async Task DeleteRow(DeliveryNoteDetailResponse order)
    {
        Reset(order);

        if (orders.Contains(order))
        {
            orders.Remove(order);
            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }

        UpdateTotals();
        StateHasChanged(); // Refresh totals
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new DeliveryNoteDetailResponse
        {
            Quantity =1
        };
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }

    private List<DeliveryNoteDetailResponse> GetCurrentProductList(DeliveryNoteDetailResponse currentOrder)
    {
        if (!string.IsNullOrEmpty(currentOrder.ProductReference))
        {
            // Find the product in the searchList that matches the current ProductReference
            var currentProduct = searchList.FirstOrDefault(p => p.ProductReference == currentOrder.ProductReference);
            if (currentProduct != null)
            {
                // Create a new list starting with the current product
                var list = new List<DeliveryNoteDetailResponse> { currentProduct };
                // Add other products from searchList, excluding the current one
                list.AddRange(searchList.Where(p => p.ProductReference != currentOrder.ProductReference));
                return list;
            }
        }
        return searchList;
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await LoadData(new LoadDataArgs());
    //     }
    // }

    async Task LoadData(LoadDataArgs args)
    {
	    string _sortProperty = null;
	    string _sortOrder = null;
	    if (args.Sorts != null && args.Sorts.Any())
	    {
		    var sort = args.Sorts.First();
		    _sortProperty = sort.Property;
		    _sortOrder = sort.SortOrder == SortOrder.Ascending ? SortConstants.Ascending : SortConstants.Descending;
	    }
	    var parameters = new QueryStringParameters
	    {
		    PageNumber = (args.Skip.Value / DefaultPageSize) + 1,
		    PageSize = DefaultPageSize,
		    SearchKeyword = args.Filter,
		    SortOrder = _sortOrder,
		    SortProprety = _sortProperty
	    };

	    try
	    {
            var pagedProducts = await productsApiClient.GetPagedAsync(parameters, _cancellationTokenSource.Token);
		    searchList = pagedProducts.Items.Select(
			    p => new DeliveryNoteDetailResponse
			    {
				    ProductReference = p.Reference,
				    Description = p.Name,
				    UnitPriceExcludingTax = p.Price,
				    Quantity = 1,
			    }).ToList();

		    count = pagedProducts.TotalCount;
            
	    }
	    catch (Exception ex)
	    {
		    NotificationService.Notify(new NotificationMessage
		    {
			    Severity = NotificationSeverity.Error,
			    Summary = Localizer["error"],
			    Detail = $"{Localizer["failed_to_load_products"]}: {ex.Message}"
		    });
		    searchList = new List<DeliveryNoteDetailResponse>();
		    count = 0;
	    }

	    await InvokeAsync(StateHasChanged);
    }

    async Task LoadCustomers(LoadDataArgs args)
    {
        isLoadingCustomers = true;
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = 10,
            SearchKeyword = args?.Filter ?? string.Empty
        };

        try
        {
            var pagedCustomers = await customersApiClient.GetAsync(parameters, _cancellationTokenSource.Token);
            _filteredCustomers = pagedCustomers.Items;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_load_customers"]}: {ex.Message}"
            });
            _filteredCustomers = new List<CustomerResponse>();
        }

        isLoadingCustomers = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task LoadCustomerInvoices(LoadDataArgs args)
    {
        if (!selectedCustomerId.HasValue)
        {
            // NotificationService.Notify(new NotificationMessage
            // {
            //     Severity = NotificationSeverity.Warning,
            //     Summary = Localizer["select_a_customer_before"],
            // });
            return;
        }

        isLoadingCustomers = true;
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = 10,
            SearchKeyword = null
        };

        try
        {
            var pagedCustomers = await invoicesApiClient.GetInvoicesByCustomerIdWithSummary(
                selectedCustomerId.Value,
                parameters,
                _cancellationTokenSource.Token);

            _filteredInvoices = pagedCustomers.AsT0.Invoices.Items;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_load_customers"]}: {ex.Message}"
            });
            _filteredCustomers = new List<CustomerResponse>();
        }

        isLoadingCustomers = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task OnProductSelected(DeliveryNoteDetailResponse order, object value)
    {
        if (value != null && value is string productReference)
        {
            // Fetch the product details based on the selected productReference
            var selectedProduct = GetCurrentProductList(order)
                .FirstOrDefault(p => p.ProductReference == productReference);

            if (selectedProduct != null)
            {
                // Update the unit price
                order.Description = selectedProduct.Description;
                order.ProductReference = selectedProduct.ProductReference;
                order.UnitPriceExcludingTax = selectedProduct.UnitPriceExcludingTax; // Assuming UnitPriceExcludingTax is a property in DeliveryNoteDetailResponse
                order.DiscountPercentage = getAppParametersResponse.DiscountPercentage;
                order.VatPercentage = getAppParametersResponse.VatAmount;
                // Recalculate totals (if necessary)
                CalculateTotals(order);
                UpdateTotals();
                // Notify the grid to refresh
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task OnValueChanged(DeliveryNoteDetailResponse order, object value, string propertyName)
    {
        switch (propertyName)
        {
            case nameof(order.Quantity):
                order.Quantity = Convert.ToInt16(value);
                break;
            case nameof(order.UnitPriceExcludingTax):
                order.UnitPriceExcludingTax = Convert.ToDecimal(value);
                break;
            case nameof(order.DiscountPercentage):
                // order.DiscountPercentage = Convert.ToDouble(value);
                break;
            case nameof(order.VatPercentage):
                // order.VatPercentage = Convert.ToDouble(value);
                break;
        }

        CalculateTotals(order);
        UpdateTotals();
        await InvokeAsync(StateHasChanged); // Update UI and totals immediately
    }

    private void CalculateTotals(DeliveryNoteDetailResponse order)
    {
        if (order.Quantity > 0 && order.UnitPriceExcludingTax > 0)
        {
            decimal totalBeforeDiscount = order.Quantity * order.UnitPriceExcludingTax;
            decimal discountAmount = totalBeforeDiscount * (decimal)(order.DiscountPercentage / 100);
            order.TotalExcludingTax = totalBeforeDiscount - discountAmount;
            decimal vatAmount = order.TotalExcludingTax * (decimal)(order.VatPercentage / 100);
            order.TotalIncludingTax = order.TotalExcludingTax + vatAmount;
        }
        else
        {
            order.TotalExcludingTax = 0;
            order.TotalIncludingTax = 0;
        }
    }

    private void UpdateTotals()
    {
        totalHt = orders.Sum(o => o.TotalExcludingTax);
        totalVat = orders.Sum(o => o.TotalIncludingTax - o.TotalExcludingTax);
        totalTtc = orders.Sum(o => o.TotalIncludingTax);
    }

    void OnUpdateRow(DeliveryNoteDetailResponse order)
    {
        CalculateTotals(order);
        Reset(order);

        var toremv = orders.FirstOrDefault(t => t.Id == order.Id);
        if (toremv != null)
        {
            orders.Remove(toremv);
        }
        orders.Add(order);
        UpdateTotals();
        StateHasChanged(); // Refresh totals
    }

    void OnCreateRow(DeliveryNoteDetailResponse order)
    {
        CalculateTotals(order);
        orders.Add(order);
        ordersToInsert.Remove(order);
        UpdateTotals();
        StateHasChanged(); // Refresh totals
    }

    // Method to show the dialog
    // private async Task ShowDialog(decimal unitPrice)
    // {
    //     await DialogService.OpenAsync("Unit Price Details");
    //     ds =>
    //         <div>
    //             <p> Unit Price(ExcludingTax): @unitPrice.FormatAmount()</p>
    //             <RadzenButton Text ="Close" Click ="() => ds.Close()"/>
    //         </div>,
    //         new DialogOptions { Width = "400px", Height = "200px" });
    
    // }

    public async Task ShowDialog(string ProductReference)
    {
        await LoadStateAsync();

        await DialogService.OpenAsync<HistoryDialog>($"ProductReference {ProductReference}",
               new Dictionary<string, object>() { { "ProductReference", ProductReference } },
               new DialogOptions()
                   {
                       Resizable = true,
                       Draggable = true,
                       Resize = OnResize,
                       Drag = OnDrag,
                       Width = Settings != null ? Settings.Width : "700px",
                       Height = Settings != null ? Settings.Height : "512px",
                       Left = Settings != null ? Settings.Left : null,
                       Top = Settings != null ? Settings.Top : null
                   });

        await SaveStateAsync();
    }

    void OnDrag(System.Drawing.Point point)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog drag. Left:{point.X}, Top:{point.Y}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Left = $"{point.X}px";
        Settings.Top = $"{point.Y}px";

        InvokeAsync(SaveStateAsync);
    }

    void OnResize(System.Drawing.Size size)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog resize. Width:{size.Width}, Height:{size.Height}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Width = $"{size.Width}px";
        Settings.Height = $"{size.Height}px";

        InvokeAsync(SaveStateAsync);
    }

    DialogSettings _settings;
    public DialogSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "DialogSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DialogSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "DialogSettings", JsonSerializer.Serialize<DialogSettings>(Settings));
    }

    public class DialogSettings
    {
        public string Left { get; set; }
        public string Top { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }
    }
}
