@page "/AddOrUpdateDeliveryNote"
@page "/AddOrUpdateDeliveryNote/{num?}"

@using Radzen.Blazor
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Localization
@using Microsoft.JSInterop
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Requests
@using TunNetCom.SilkRoadErp.Sales.Contracts.DeliveryNote.Responses
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Customers
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.DeliveryNote
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Invoices
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Products
@using TunNetCom.SilkRoadErp.Sales.WebApp.Helpers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales

@inject IStringLocalizer<SharedResource> Localizer
@inject ToastService toastService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject IDeliveryNoteApiClient deliveryNoteApiClient
@inject IProductsApiClient productsApiClient
@inject IInvoicesApiClient invoicesApiClient
@inject ICustomersApiClient customersApiClient
@inject ILogger<AddOrUpdateDeliveryNote> logger

<style>
    .delivery-note-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 20px;
    }

    .delivery-note-form {
    display: flex;
    gap: 20px;
    align-items: center;
    flex-wrap: wrap;
    flex-grow: 1;
    }

    .header-actions {
    display: flex;
    gap: 10px;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    }

    .summary-card {
    background-color: #f8f9fa;
    padding: 10px 20px;
    border-radius: 5px;
    margin-left: auto; /* This pushes it to the right */
    border-left: 1px solid #ddd; /* Optional: adds a separator line */
    }

    .action-buttons {
    display: flex;
    gap: 10px;
    align-items: center;
    }
</style>

<!-- Loading Indicator -->
@if (isLoading)
{
    <p>@Localizer["loading_delivery_note"]...</p>
}
else
{
    <!-- Delivery Note Container with Form and Summary -->
    <div class="delivery-note-container">
        <div class="delivery-note-form">
            <RadzenLabel Text="@Localizer["delivery_note_number"]" />
            <RadzenTextBox @bind-Value="deliveryNoteNumber" Name="DeliveryNoteNumber" Style="width: 200px;" ReadOnly="true" />

            <RadzenLabel Text="@Localizer["date"]" />
            <RadzenDatePicker @bind-Value="deliveryNoteDate" Name="DeliveryNoteDate" Style="width: 200px;" DateFormat="d MMMM yyyy" ShowTime="false" />

            <RadzenLabel Text="@Localizer["customer"]" />
            <RadzenDropDownDataGrid AllowClear="true"
            IsLoading="@isLoadingCustomers"
            @bind-Value="@selectedCustomerId"
            LoadData="@LoadCustomers"
            AllowFiltering="true"
            Style="width: 350px;"
            Data="@_filteredCustomers"
            TextProperty="@nameof(CustomerResponse.Name)"
            ValueProperty="@nameof(CustomerResponse.Id)"
            Placeholder="@Localizer["select_customer"]">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="@nameof(CustomerResponse.Id)" Title="ID" Width="80px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(CustomerResponse.Name)" Title="@Localizer["name"]" Width="220px" />
                </Columns>
            </RadzenDropDownDataGrid>

            <RadzenLabel Text="@Localizer["invoice_number"]" />
            <RadzenDropDownDataGrid AllowClear="true"
            IsLoading="@isLoadingInvoices"
            @bind-Value="@_selectedInvoiceId"
            LoadData="@LoadCustomerInvoices"
            AllowFiltering="true"
            Style="width: 350px;"
            Data="@_filteredInvoices"
            TextProperty="@nameof(InvoiceResponse.Number)"
            ValueProperty="@nameof(InvoiceResponse.Number)"
            Placeholder="@Localizer["select_invoice"]">
                <Columns>
                    <RadzenDropDownDataGridColumn Property="@nameof(InvoiceResponse.Number)" Title="Num" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(InvoiceResponse.Date)" Title="Date" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="@nameof(InvoiceResponse.TotalIncludingTax)" Title="@Localizer["tot_ttc"]" Width="200px" />
                </Columns>
            </RadzenDropDownDataGrid>
        </div>
    </div>

    <!-- DataGrid with Actions -->
    <RadzenDataGrid @ref="ordersGrid" AllowAlternatingRows="false"
    AllowPaging="true"
    EditMode="@editMode"
    Data="@orders" TItem="DeliveryNoteDetailResponse"
    RowUpdate="@OnUpdateRow"
    RowCreate="@OnCreateRow"
    Page="@Reset"
    ColumnWidth="200px">
        <HeaderTemplate>
            <div class="header-actions">
                <div class="action-buttons">
                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="@Localizer["add_new_order"]"
                    Click="@InsertRow" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />

                    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                    Icon="print"
                    Text="@Localizer["print"]"
                    Variant="Variant.Flat"
                    Disabled="@(!orders.Any())" />

                    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                    Icon="save"
                    Text="@Localizer["save"]"
                    Variant="Variant.Flat"
                    Click="@SaveDeliveryNote" />

                    <RadzenButton ButtonStyle="ButtonStyle.Primary"
                    Icon="receipt"
                    Text="@Localizer["convert_to_price_note"]"
                    Variant="Variant.Flat"
                    Disabled="@(!orders.Any())" />
                </div>

                <RadzenCard class="summary-card" Variant="Variant.Outlined">
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="2rem" JustifyContent="JustifyContent.End">
                        <RadzenText TextStyle="TextStyle.Button">
                            @Localizer["total_net"]: <strong>@totalTtc.FormatAmount()</strong>
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Button">
                            @Localizer["total_gross"]: <strong>@totalHt.FormatAmount()</strong>
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Button">
                            @Localizer["total_vat"]: <strong>@totalVat.FormatAmount()</strong>
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>
            </div>
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Width="600px" TItem="DeliveryNoteDetailResponse"
            Property="@nameof(DeliveryNoteDetailResponse.ProductReferenceAndDescription)"
            Title="@Localizer["product"]">
                <EditTemplate Context="order">
                    <RadzenDropDownDataGrid Style="width: 100%; max-width: 600px;"
                    AllowClear="true"
                    @bind-Value="order.ProductReference"
                    LoadData="@LoadData"
                    AllowFiltering="true"
                    Data="@(GetCurrentProductList(order))"
                    Count="@count"
                    Change="@(args => OnProductSelected(order, args))"
                    TextProperty="@nameof(DeliveryNoteDetailResponse.ProductReferenceAndDescription)"
                    ValueProperty="@nameof(DeliveryNoteDetailResponse.ProductReference)"
                    Name="DropDownDataGridFilteringLoadData" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="100px" Property="@nameof(DeliveryNoteDetailResponse.Quantity)"
            Title="@Localizer["quantity"]">
                <EditTemplate Context="order">
                    <RadzenNumeric TValue="int"
                    Value="order.Quantity"
                    Change="@(args => OnValueChanged(order, args, nameof(order.Quantity)))"
                    Style="width:100%;"
                    Name="Quantity"/>
                    <RadzenRequiredValidator Text="@Localizer["quantity_required"]" Component="Quantity" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="150px" Property="@nameof(DeliveryNoteDetailResponse.UnitPriceExcludingTax)" Title="@Localizer["unit_price_ht"]">
                <Template Context="order">
                    @order.UnitPriceExcludingTax.FormatAmount()
                </Template>
                @* <EditTemplate Context="order"> *@
                @*     <RadzenNumeric TValue="decimal" *@
                @*                    Value="order.UnitPriceExcludingTax" *@
                @*                    Change="@(args => OnValueChanged(order, args, nameof(order.UnitPriceExcludingTax)))" *@
                @*                    Style="width:100%;" *@
                @*                    Format="n0" *@
                @*                    Name="UnitPriceExcludingTax" /> *@
                @*     <RadzenRequiredValidator Text="@Localizer["unit_price_required"]" Component="UnitPriceExcludingTax" Popup="true" /> *@
                @* </EditTemplate> *@
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="100px" Property="@nameof(DeliveryNoteDetailResponse.DiscountPercentage)"
            Title="@Localizer["discount_percentage"]">
                <Template Context="order">
                    @order.DiscountPercentage
                </Template>
                @* <EditTemplate Context="order"> *@
                @*     <RadzenNumeric TValue="double" *@
                @*     Value="order.DiscountPercentage" *@
                @*     Change="@(args => OnValueChanged(order, args, nameof(order.DiscountPercentage)))" *@
                @*     Style="width:100%;" *@
                @*     FormatString="{0:N2}%" *@
                @*     Name="DiscountPercentage" /> *@
                @* </EditTemplate> *@
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="@nameof(DeliveryNoteDetailResponse.TotalExcludingTax)" Title="@Localizer["total_excluding_tax"]">
                <Template Context="order">
                    @order.TotalExcludingTax.FormatAmount()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="100px" Property="@nameof(DeliveryNoteDetailResponse.VatPercentage)" Title="@Localizer["vat_percentage"]">
                <Template Context="order">
                    @order.VatPercentage
                </Template>
                @* <EditTemplate Context="order"> *@
                @*     <RadzenNumeric TValue="double" *@
                @*     Value="order.VatPercentage" *@
                @*     Change="@(args => OnValueChanged(order, args, nameof(order.VatPercentage)))" *@
                @*     Style="width:100%;" *@
                @*     FormatString="{0:N2}%" *@
                @*     Name="VatPercentage" /> *@
                @*     <RadzenRequiredValidator Text="@Localizer["vat_required"]" Component="VatPercentage" Popup="true" /> *@
                @* </EditTemplate> *@
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Property="@nameof(DeliveryNoteDetailResponse.TotalIncludingTax)" Title="@Localizer["total_including_tax"]">
                <Template Context="order">
                    @order.TotalIncludingTax.FormatAmount()
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right"
            Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                    Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                    Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))" aria-label="Save">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat"
                    Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                    Click="@((args) => CancelEdit(order))" aria-label="Cancel">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat"
                    Shade="Shade.Lighter" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1"
                    Click="@(args => DeleteRow(order))" aria-label="Delete">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter] public string? num { get; set; }
    RadzenDataGrid<DeliveryNoteDetailResponse> ordersGrid;
    List<DeliveryNoteDetailResponse> orders;
    List<DeliveryNoteDetailResponse> searchList;
    int count;
    private CancellationTokenSource _cancellationTokenSource = new();
    private List<CustomerResponse> _filteredCustomers { get; set; } = new();
    private List<InvoiceResponse> _filteredInvoices { get; set; } = new();
    List<KeyValuePair<int, string>> editedFields = new List<KeyValuePair<int, string>>();
    DataGridEditMode editMode = DataGridEditMode.Single;
    List<DeliveryNoteDetailResponse> ordersToInsert = new List<DeliveryNoteDetailResponse>();
    List<DeliveryNoteDetailResponse> ordersToUpdate = new List<DeliveryNoteDetailResponse>();
    private bool isLoading = true;
    bool isLoadingCustomers = false;
    bool isLoadingInvoices = false;
    decimal totalHt;
    decimal totalVat;
    decimal totalTtc;
    string deliveryNoteNumber;
    DateTime deliveryNoteDate = DateTime.Now;

    private int? _selectedCustomerId;
    int? selectedCustomerId
    {
        get => _selectedCustomerId;
        set
        {
            if (_selectedCustomerId != value)
            {
                _selectedCustomerId = value;
                selectedInvoiceId = null;
                _filteredInvoices = new List<InvoiceResponse>();
                _ = LoadCustomerInvoices(new LoadDataArgs());
                StateHasChanged();
            }
        }
    }

    private int? _selectedInvoiceId;
    int? selectedInvoiceId
    {
        get => _selectedInvoiceId;
        set
        {
            if (_selectedInvoiceId != value)
            {
                _selectedInvoiceId = value;
                StateHasChanged();
            }
        }
    }

    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(DeliveryNoteDetailResponse order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        searchList = new List<DeliveryNoteDetailResponse>();

        await LoadCustomers(null);
        await FetchDeliveryNote();
        await LoadCustomerInvoices(null);

        isLoading = false;
    }

    private async Task SaveDeliveryNote()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var request = new CreateDeliveryNoteRequest
            {
                Date = deliveryNoteDate,
                TotalExcludingTax = totalHt,
                TotalVat = totalVat,
                TotalAmount = totalTtc,
                DeliveryTime = TimeOnly.FromDateTime(DateTime.Now),
                InvoiceNumber = _selectedInvoiceId,
                CustomerId = _selectedCustomerId,
                Items = orders.Select(o => new DeliveryNoteItemRequest
                {
                    Id = o.Id,
                    ProductReference = o.ProductReference,
                    Description = o.Description,
                    Quantity = o.Quantity,
                    UnitPriceExcludingTax = o.UnitPriceExcludingTax,
                    DiscountPercentage = o.DiscountPercentage,
                    TotalExcludingTax = o.TotalExcludingTax,
                    VatPercentage = o.VatPercentage,
                    TotalIncludingTax = o.TotalIncludingTax
                }).ToList()
            };

            var response = await deliveryNoteApiClient.CreateDeliveryNoteAsync(request, _cancellationTokenSource.Token);

            if (response.IsSuccess)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = Localizer["success"],
                    Detail = Localizer["delivery_note_saved_successfully"]
                });

                // Update the delivery note number if this is a new note
                if (string.IsNullOrEmpty(deliveryNoteNumber))
                {
                    deliveryNoteNumber = response.ToString();
                }
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = Localizer["error"],
                    Detail = $"{Localizer["failed_to_save_delivery_note"]}: {response.Errors.First().Message}"
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_save_delivery_note"]}: {ex.Message}"
            });
            logger.LogError(ex, "Failed to save delivery note");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FetchDeliveryNote()
    {
        if (string.IsNullOrEmpty(num))
        {
            orders = new List<DeliveryNoteDetailResponse>();
            totalHt = 0;
            totalVat = 0;
            totalTtc = 0;
            return;
        }

        try
        {
            if (int.TryParse(num, out var numAsInt))
            {
                var deliveryNote = await deliveryNoteApiClient.GetDeliveryNoteByNumAsync(
                    numAsInt,
                    _cancellationTokenSource.Token);

                if (deliveryNote != null)
                {
                    deliveryNoteNumber = deliveryNote.DeliveryNoteNumber.ToString();
                    deliveryNoteDate = deliveryNote.Date;
                    selectedCustomerId = deliveryNote.CustomerId;
                    selectedInvoiceId = deliveryNote.InvoiceNumber;

                    if (deliveryNote.Items != null && deliveryNote.Items.Any())
                    {
                        orders = deliveryNote.Items;
                    }
                    else
                    {
                        orders = new List<DeliveryNoteDetailResponse>();
                    }

                    totalHt = deliveryNote.TotalExcludingTax;
                    totalVat = deliveryNote.TotalVat;
                    totalTtc = deliveryNote.TotalAmount;
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_fetch_delivery_note"]}: {e.Message}"
            });

            logger.LogError(e, "Failed to save delivery note");
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task EditRow(DeliveryNoteDetailResponse order)
    {
        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    async Task SaveRow(DeliveryNoteDetailResponse order)
    {
        try
        {
            await ordersGrid.UpdateRow(order);
        }
        catch (Exception e)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_save_delivery_note"]}"
            });
            logger.LogError(e, "Failed to save delivery note");
        }
    }

    void CancelEdit(DeliveryNoteDetailResponse order)
    {
        Reset(order);
        ordersGrid.CancelEditRow(order);
    }

    async Task DeleteRow(DeliveryNoteDetailResponse order)
    {
        Reset(order);

        if (orders.Contains(order))
        {
            orders.Remove(order);
            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }

        UpdateTotals();
        StateHasChanged(); // Refresh totals
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var order = new DeliveryNoteDetailResponse
        {
            Quantity =1
        };
        ordersToInsert.Add(order);
        await ordersGrid.InsertRow(order);
    }

    private List<DeliveryNoteDetailResponse> GetCurrentProductList(DeliveryNoteDetailResponse currentOrder)
    {
        if (!string.IsNullOrEmpty(currentOrder.ProductReference))
        {
            // Find the product in the searchList that matches the current ProductReference
            var currentProduct = searchList.FirstOrDefault(p => p.ProductReference == currentOrder.ProductReference);
            if (currentProduct != null)
            {
                // Create a new list starting with the current product
                var list = new List<DeliveryNoteDetailResponse> { currentProduct };
                // Add other products from searchList, excluding the current one
                list.AddRange(searchList.Where(p => p.ProductReference != currentOrder.ProductReference));
                return list;
            }
        }
        return searchList;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
        }
    }

    async Task LoadProducts(string filter = "")
    {
        var productsParameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = 10,
            SearchKeyword = filter
        };

        try
        {
            var pagedProducts = await productsApiClient.GetPagedAsync(productsParameters, _cancellationTokenSource.Token);
            searchList = pagedProducts.Items.Select(
                p => new DeliveryNoteDetailResponse
                {
                    ProductReference = p.Reference,
                    Description = p.Name,
                    UnitPriceExcludingTax = p.Price,
                    Quantity = 1,
                    DiscountPercentage = p.DiscountPourcentage,
                    VatPercentage = p.VatRate,
                    TotalExcludingTax = 0,
                    TotalIncludingTax = 0
                }).ToList();

            count = pagedProducts.TotalCount;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_load_products"]}: {ex.Message}"
            });
            searchList = new List<DeliveryNoteDetailResponse>();
            count = 0;
        }

        await InvokeAsync(StateHasChanged);
    }

    void LoadData(LoadDataArgs args)
    {
        _ = LoadProducts(args.Filter);
    }

    async Task LoadCustomers(LoadDataArgs args)
    {
        isLoadingCustomers = true;
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = 10,
            SearchKeyword = args?.Filter ?? string.Empty
        };

        try
        {
            var pagedCustomers = await customersApiClient.GetAsync(parameters, _cancellationTokenSource.Token);
            _filteredCustomers = pagedCustomers.Items;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_load_customers"]}: {ex.Message}"
            });
            _filteredCustomers = new List<CustomerResponse>();
        }

        isLoadingCustomers = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task LoadCustomerInvoices(LoadDataArgs args)
    {
        if (!selectedCustomerId.HasValue)
        {
            // NotificationService.Notify(new NotificationMessage
            // {
            //     Severity = NotificationSeverity.Warning,
            //     Summary = Localizer["select_a_customer_before"],
            // });
            return;
        }

        isLoadingCustomers = true;
        var parameters = new QueryStringParameters
        {
            PageNumber = 1,
            PageSize = 10,
            SearchKeyword = null
        };

        try
        {
            var pagedCustomers = await invoicesApiClient.GetInvoicesByCustomerIdWithSummary(
                selectedCustomerId.Value,
                parameters,
                _cancellationTokenSource.Token);

            _filteredInvoices = pagedCustomers.AsT0.Invoices.Items;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = Localizer["error"],
                Detail = $"{Localizer["failed_to_load_customers"]}: {ex.Message}"
            });
            _filteredCustomers = new List<CustomerResponse>();
        }

        isLoadingCustomers = false;
        await InvokeAsync(StateHasChanged);
    }

    async Task OnProductSelected(DeliveryNoteDetailResponse order, object value)
    {
        if (value != null && value is string productReference)
        {
            // Fetch the product details based on the selected productReference
            var selectedProduct = GetCurrentProductList(order)
                .FirstOrDefault(p => p.ProductReference == productReference);

            if (selectedProduct != null)
            {
                // Update the unit price
                order.UnitPriceExcludingTax = selectedProduct.UnitPriceExcludingTax; // Assuming UnitPriceExcludingTax is a property in DeliveryNoteDetailResponse
                order.DiscountPercentage = selectedProduct.DiscountPercentage;
                order.VatPercentage = selectedProduct.VatPercentage;
                // Recalculate totals (if necessary)
                CalculateTotals(order);
                UpdateTotals();
                // Notify the grid to refresh
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task OnValueChanged(DeliveryNoteDetailResponse order, object value, string propertyName)
    {
        switch (propertyName)
        {
            case nameof(order.Quantity):
                order.Quantity = Convert.ToInt16(value);
                break;
            case nameof(order.UnitPriceExcludingTax):
                order.UnitPriceExcludingTax = Convert.ToDecimal(value);
                break;
            case nameof(order.DiscountPercentage):
                order.DiscountPercentage = Convert.ToDouble(value);
                break;
            case nameof(order.VatPercentage):
                order.VatPercentage = Convert.ToDouble(value);
                break;
        }

        CalculateTotals(order);
        UpdateTotals();
        await InvokeAsync(StateHasChanged); // Update UI and totals immediately
    }

    private void CalculateTotals(DeliveryNoteDetailResponse order)
    {
        if (order.Quantity > 0 && order.UnitPriceExcludingTax > 0)
        {
            decimal totalBeforeDiscount = order.Quantity * order.UnitPriceExcludingTax;
            decimal discountAmount = totalBeforeDiscount * (decimal)(order.DiscountPercentage / 100);
            order.TotalExcludingTax = totalBeforeDiscount - discountAmount;
            decimal vatAmount = order.TotalExcludingTax * (decimal)(order.VatPercentage / 100);
            order.TotalIncludingTax = order.TotalExcludingTax + vatAmount;
        }
        else
        {
            order.TotalExcludingTax = 0;
            order.TotalIncludingTax = 0;
        }
    }

    private void UpdateTotals()
    {
        totalHt = orders.Sum(o => o.TotalExcludingTax);
        totalVat = orders.Sum(o => o.TotalIncludingTax - o.TotalExcludingTax);
        totalTtc = orders.Sum(o => o.TotalIncludingTax);
    }

    void OnUpdateRow(DeliveryNoteDetailResponse order)
    {
        CalculateTotals(order);
        Reset(order);

        var toremv = orders.FirstOrDefault(t => t.Id == order.Id);
        if (toremv != null)
        {
            orders.Remove(toremv);
        }
        orders.Add(order);
        UpdateTotals();
        StateHasChanged(); // Refresh totals
    }

    void OnCreateRow(DeliveryNoteDetailResponse order)
    {
        CalculateTotals(order);
        orders.Add(order);
        ordersToInsert.Remove(order);
        UpdateTotals();
        StateHasChanged(); // Refresh totals
    }
}