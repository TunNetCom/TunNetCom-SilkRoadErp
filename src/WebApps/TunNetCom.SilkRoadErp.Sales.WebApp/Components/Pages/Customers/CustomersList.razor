@page "/customers_list"
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.Contracts.Customers
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Customers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using Radzen.Blazor
@using Radzen
@using TunNetCom.DeleteModal
@using TunNetCom.SilkRoadErp.Sales.Contracts.Sorting
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> Localizer
@inject ICustomersApiClient customerService
@inject ToastService toastService

@* <Modal @ref="yesOrNoDeleteModal" /> *@
<RadzenCard Style="margin: 1rem;">
    <RadzenStack JustifyContent="JustifyContent.SpaceBetween" >
        <h3>@Localizer["customers"]</h3>
    </RadzenStack>


    <RadzenCard Style="margin-bottom: 1rem;">
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenTextBox @bind-Value="searchKeyword"
                           Placeholder="@Localizer["Search"]"
                           Style="width: 300px;"
                           Change="@(async args => await customerGrid.Reload())" />

            <RadzenButton Icon="add_circle"
                          ButtonStyle="ButtonStyle.Primary"
                          Text="@Localizer["add_customer"]"
                          Click="@CreateCustomer" />
        </RadzenStack>
    </RadzenCard>


    <RadzenDataGrid @ref="customerGrid"
                    Page="@OnPage"
                    Count="@totalCustomers"
                    Data="@customers"
                    LoadData="@LoadCustomerData"
                    AllowPaging="true"
                    AllowSorting="true"
                    AllowFiltering="true"
                    PageSizeOptions="@pageSizeOptions"
                    PageSize="@_defaultPageSize"
                    ColumnWidth="200px"
                    IsLoading="@isLoadingCustomers"
                    ShowPagingSummary="true"
                    Responsive="true">

        <Columns>
            <RadzenDataGridColumn Property="Nom" Title="@Localizer["customer_name"]" />
            <RadzenDataGridColumn Property="Tel" Title="@Localizer["customer_phone"]" />
            <RadzenDataGridColumn Property="Mail" Title="@Localizer["customer_email"]" />
            <RadzenDataGridColumn Title="@Localizer["actions_label"]">
                <Template Context="customer">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Style="margin-right: 0.5rem"
                                  Click="@((args) => OnClickEditButton(args, @customer.Id.ToString()))" />
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => ConfirmDeleteCustomer(@customer.Id))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

</RadzenCard>


@code {

    private RadzenDataGrid<CustomerResponse> customerGrid = default!;
    private Modal yesOrNoDeleteModal = default!;

    private string searchKeyword = string.Empty;
    private List<CustomerResponse> customers = new();
    private int totalCustomers;
    private bool isLoadingCustomers = false;
    private int currentCustomerIdToDelete;
    private CancellationTokenSource cancellationTokenSource = new();
    private const int _defaultPageSize = 10;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };

    void OnPage(PagerEventArgs args)
    {

    }

    async Task LoadCustomerData(LoadDataArgs args)
    {

        var parameters = new QueryStringParameters
            {
                PageNumber = (args.Skip.Value / _defaultPageSize) + 1,
                PageSize = args.Top ?? 10,
                SearchKeyword = searchKeyword ?? args.Filter,
            };

        isLoadingCustomers = true;
        await Task.Yield();

        var result = await customerService.GetAsync(parameters, cancellationTokenSource.Token);
        customers = result.Items;
        totalCustomers = result.TotalCount;

        isLoadingCustomers = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await customerGrid.Reload();
        }
    }

    protected void OnClickEditButton(EventArgs args, string id)
    {
        EditCustomer(int.Parse(id));
    }

    [Inject] DialogService DialogService { get; set; }

    async Task ConfirmDeleteCustomer(int customerId)
    {
        bool? confirmed = await DialogService.Confirm(Localizer["delete_customer_confirmation"],
                                                      Localizer["delete_confirmation"],
                                                      new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirmed == true)
        {
            await customerService.DeleteAsync(customerId, cancellationTokenSource.Token);
            toastService.Notify(new(ToastType.Warning, $"{Localizer["customer"]} {Localizer["deleted_with_success"]}"));
            await customerGrid.Reload();
        }
    }

    private void CreateCustomer()
    {
        navigationManager.NavigateTo("/editcustomer");
    }

    private void EditCustomer(int id)
    {
        navigationManager.NavigateTo($"/editcustomer/{id}");
    }

    public void Dispose()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
    }
}


