@page "/editcustomer/{id:int?}"
@using TunNetCom.SilkRoadErp.Sales.Contracts.Customers
@using BlazorBootstrap
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.HttpClients
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Customers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Helpers
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using TunNetCom.ErrorsModal
@using TunNetCom.NotFoundModal
@using System.Globalization
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services
@inject ICustomersApiClient customerService
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> localizer


<h3>@(customer.Id == 0 ? localizer["add_client"] : localizer["edit_client"])</h3>

<RadzenCard Style="padding: 20px; max-width: 600px;">
    <RadzenTemplateForm Data="@customer" Submit="@OnSubmit">
        <RadzenFieldset>
            <RadzenLabel Text="@localizer["customer_name"]" />
            <RadzenTextBox @bind-Value="customer.Nom" Placeholder="@localizer["customer_name"]" Name="Nom" Style="width:100%;" />

            <RadzenLabel Text="@localizer["customer_phone"]" />
            <RadzenTextBox @bind-Value="customer.Tel" Name="Tel" Style="width:100%;" />

            <RadzenLabel Text="@localizer["customer_adress"]" />
            <RadzenTextBox @bind-Value="customer.Adresse" Name="Adresse" Style="width:100%;" />

            <RadzenLabel Text="@localizer["customer_matricule"]" />
            <RadzenTextBox @bind-Value="customer.Matricule" Name="Matricule" Style="width:100%;" />

            <RadzenLabel Text="@localizer["customer_code"]" />
            <RadzenTextBox @bind-Value="customer.Code" Name="Code" Style="width:100%;" />

            <RadzenLabel Text="@localizer["customer_code_cat"]" />
            <RadzenTextBox @bind-Value="customer.CodeCat" Name="CodeCat" Style="width:100%;" />

            <RadzenLabel Text="@localizer["customer_etb_sec"]" />
            <RadzenTextBox @bind-Value="customer.EtbSec" Name="EtbSec" Style="width:100%;" />

            <RadzenLabel Text="@localizer["customer_email"]" />
            <RadzenTextBox @bind-Value="customer.Mail" Name="Mail" Style="width:100%;" />

            <div class="mt-2">
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="@localizer["save_label"]" Style="margin-right: 10px;" Icon="save" />
                <RadzenButton Text="@localizer["cancel_label"]" Click="@Cancel" ButtonStyle="ButtonStyle.Danger" Icon="close" />
            </div>
        </RadzenFieldset>
    </RadzenTemplateForm>
</RadzenCard>

<Modal @ref="errorsModal" />

@code {
    [Parameter] public int? Id { get; set; }
    [Inject] protected ToastService toastService { get; set; } = default!;
    [Inject] protected DialogService dialogService { get; set; } = default!;
    private CustomerResponse customer = new CustomerResponse();
    private CancellationTokenSource cancellationTokenSource = new();
    private Modal errorsModal = default!;
    // The RadzenForm expects an EventCallback, so we us callback factory to wrap the method, define a property and bind it in razor
    private EventCallback<CustomerResponse> OnSubmit => EventCallback.Factory.Create<CustomerResponse>(this, HandleValidSubmit);


    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var customerResult = await customerService.GetAsync(Id.Value, cancellationTokenSource.Token);
            if (customerResult.IsT0)
            {
                customer = customerResult.AsT0;
                return;
            }

            navigationManager.NavigateTo("/Error");
        }
    }

    private async Task HandleValidSubmit(CustomerResponse model)
    {
        if (customer.Id == 0)
        {
            var createCustomerResult = await customerService.CreateAsync(
                new CreateCustomerRequest
                    {
                        Nom = customer.Nom,
                        Tel = customer.Tel,
                        Adresse = customer.Adresse,
                        Matricule = customer.Matricule,
                        Code = customer.Code,
                        CodeCat = customer.CodeCat,
                        EtbSec = customer.EtbSec,
                        Mail = customer.Mail
                    },
            cancellationTokenSource.Token);

            if (createCustomerResult.IsT0)
            {
                toastService.Notify(new(ToastType.Success, $" {localizer["customer"]} {localizer["created_with_success"]}"));
                navigationManager.NavigateTo("/customers_list");
                return;
            }

            await ShowErrorsDialog(createCustomerResult.AsT1.ToErrorsList());
            return;
        }

        var updateCustomerResult = await customerService.UpdateAsync(
            new UpdateCustomerRequest
                {
                    Nom = customer.Nom,
                    Tel = customer.Tel,
                    Adresse = customer.Adresse,
                    Matricule = customer.Matricule,
                    Code = customer.Code,
                    CodeCat = customer.CodeCat,
                    EtbSec = customer.EtbSec,
                    Mail = customer.Mail
                },
            customer.Id,
            cancellationTokenSource.Token);

        if (updateCustomerResult.IsT0)
        {
            if (updateCustomerResult.AsT0 == ResponseTypes.Success)
            {
                toastService.Notify(new(ToastType.Success, $"{localizer["customer"]} {localizer["updated_with_success"]}"));
                navigationManager.NavigateTo("/customers_list");
                return;
            }

            navigationManager.NavigateTo("/Error");
            return;
        }

        await ShowErrorsDialog(updateCustomerResult.AsT1.ToErrorsList());
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/customers_list");
    }

    private async Task ShowErrorsDialog(List<string> errorList)
    {
        await dialogService.OpenAsync("Validation Errors", ds => @<div>
            <ul>
                @foreach (var error in errorList)
                {
                    <li>@error</li>
                }
            </ul>
        </div>, new DialogOptions() { Width = "500px", Height = "300px", CloseDialogOnOverlayClick = true });
    }
}