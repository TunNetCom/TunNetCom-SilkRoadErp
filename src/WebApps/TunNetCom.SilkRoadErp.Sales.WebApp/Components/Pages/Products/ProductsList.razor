@page "/products_list"
@using Microsoft.Extensions.Localization
@using TunNetCom.SilkRoadErp.Sales.HttpClients
@using TunNetCom.SilkRoadErp.Sales.HttpClients.Services.Products
@using TunNetCom.SilkRoadErp.Sales.WebApp.Locales
@using TunNetCom.SilkRoadErp.Sales.Contracts.Products
@using Radzen
@using Radzen.Blazor
@inject IProductsApiClient productService
@inject NavigationManager navigationManager
@inject IStringLocalizer<SharedResource> Localizer
@inject DialogService DialogService
@inject ToastService toastService

<div class="products-container">
    <div class="products-card">
        <div class="products-header">
            <h3 class="products-title">@Localizer["products"]</h3>
            <RadzenButton Icon="add" Text="@Localizer["add_product"]"
                          ButtonStyle="ButtonStyle.Primary"
                          Click="@CreateProduct"
                          Class="btn-primary" />
        </div>

        <RadzenTextBox Placeholder="@Localizer["Search"]"
                       @bind-Value="searchKeyword"
                       Change="@(async (string value) => await productGrid.Reload())"
                       Class="products-search" />

        <RadzenDataGrid @ref="productGrid"
                        TItem="ProductResponse"
                        Data="@products"
                        Count="@totalProducts"
                        LoadData="@LoadProductData"
                        AllowFiltering="true"
                        AllowPaging="true"
                        AllowSorting="true"
                        FilterPopupRenderMode="PopupRenderMode.OnDemand"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        PageSize="@defaultPageSize"
                        Density="Density.Compact"
                        Class="products-grid"
                        IsLoading="@isLoadingProducts"
                        ShowPagingSummary="true"
                        Responsive="true"
                        RowRender="OnRowRender">
            <EmptyTemplate>
                <p style="font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="ProductResponse" Property="@nameof(ProductResponse.Reference)" Title="@Localizer["product_refe"]" Width="200px">
                    <Template Context="product">
                        <span class="grid-cell">@product.Reference</span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductResponse" Property="@nameof(ProductResponse.Name)" Title="@Localizer["product_name"]" Width="200px">
                    <Template Context="product">
                        <span class="grid-cell">@product.Name</span>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductResponse" Property="@nameof(ProductResponse.Qte)" Title="@Localizer["product_qte"]" Width="200px">
	                <Template Context="product">
                        <span class="grid-cell @(product.Qte < product.QteLimit ? "low-quantity" : "")">@product.Qte</span>
	                </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="ProductResponse" Filterable="false" Sortable="false" Width="200px" TextAlign="TextAlign.Center">
                    <Template Context="product">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Outlined" Size="ButtonSize.Medium" Shade="Shade.Lighter" Class="rz-my-1 rz-ms-1"
                                      Click="@(() => EditProduct(product.Reference))"
                                      Title="@Localizer["edit_button_label"]" />
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Outlined" Size="ButtonSize.Medium" Shade="Shade.Lighter"
                                      Click="@(() => ConfirmDeleteProduct(product.Reference))"
                                      Title="@Localizer["delete_button_label"]" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>



<style>
    :root {
        --primary-color: #1a73e8;
        --primary-hover: #135ab6;
        --danger-color: #d32f2f;
        --danger-hover: #b71c1c;
        --warning-color: #ff9800;
        --warning-hover: #f57c00;
        --success-color: #4CAF50;
        --success-light: rgba(76, 175, 80, 0.1);
        --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --card-bg: #ffffff;
        --grid-header-bg: #f5f7fa;
        --grid-header-color: #202124;
        --grid-row-hover: #f1f3f5;
        --border-radius: 8px;
        --border-color: #e0e0e0;
        --text-color: #202124;
        --muted-text: #5f6368;

    }
    .products-container {
        padding: 1.25rem;
        max-width: 1280px;
        margin: 1rem auto;
    }

    .products-card {
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        padding: 1.5rem;
        border: none;
    }

    .products-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.25rem;
    }

    .products-title {
        font-weight: 600;
        margin: 0;
        font-size: 2rem;
        line-height: 1.2;
    }

    .products-search {
        width: 100%;
        border-radius: var(--border-radius);
        border: 1px solid var(--border-color);
        padding: 0.75rem 1rem;
        margin-bottom: 1.25rem;
        font-size: 0.95rem;
    }

        .products-search:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(26, 115, 232, 0.1);
            outline: none;
        }

    .products-grid {
        border-radius: var(--border-radius);
        overflow: hidden;
        border: none;
    }

        .products-grid .rz-datatable thead {
            background: var(--grid-header-bg);
            border-bottom: 1px solid var(--border-color);
        }

            .products-grid .rz-datatable thead th {
                font-weight: 500;
                padding: 0.75rem 1rem;
                text-align: left;
                font-size: 0.9rem;
                text-transform: uppercase;
                letter-spacing: 0.02em;
            }

        .products-grid .rz-datatable tbody tr {
            border-bottom: 1px solid var(--border-color);
        }

            .products-grid .rz-datatable tbody tr:last-child {
                border-bottom: none;
            }

            .products-grid .rz-datatable tbody tr:hover {
                background: var(--grid-row-hover);
            }

    .grid-cell {
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        line-height: 1.5;
    }

    /* Custom row styling for low quantity */
    .rz-datatable-tbody > tr[style*="background-color: var(--rz-success)"] {
    }

        .rz-datatable-tbody > tr[style*="background-color: var(--rz-success)"]:hover {
            background-color: rgba(76, 175, 80, 0.2) !important;
        }

    .low-quantity {
        color: var(--warning-color);
        font-weight: bold;
        background-color: rgba(255, 152, 0, 0.1);
        border-radius: 4px;
        padding: 0.75rem 1rem;
        line-height: 1.5;
    }



    .products-grid .rz-grid-table {
        border-collapse: collapse;
    }
</style>
@code {
    private RadzenDataGrid<ProductResponse> productGrid;
    private IEnumerable<ProductResponse> products = new List<ProductResponse>();
    private int totalProducts;
    private bool isLoadingProducts;
    private string searchKeyword = string.Empty;
    private string currentProductRefeToDelete;
    private CancellationTokenSource cancellationTokenSource = new();
    private int defaultPageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductData(new LoadDataArgs());
    }
    private async Task LoadProductData(LoadDataArgs args)
    {
        isLoadingProducts = true;
        var filter = args.Filter?.ToString();
        var sort = args.OrderBy?.ToString();
        // Parse sort string (e.g., "Number desc" or "Date")
        string sortProperty = null;
        string sortOrder = null;
        if (!string.IsNullOrEmpty(sort))
        {
	        var sortParts = sort.Split(' ');
	        sortProperty = sortParts[0];
	        sortOrder = sortParts.Length > 1 && sortParts[1].ToLower() == "desc" ? "DESC" : "ASC";
        }

        var productsParameters = new QueryStringParameters
            {
                PageNumber = (args.Skip ?? 0) / defaultPageSize + 1,
                PageSize = defaultPageSize,
                SearchKeyword = searchKeyword,
                SortProprety = sortProperty,
                SortOrder = sortOrder
            };

        var result = await productService.GetPagedAsync(productsParameters, cancellationTokenSource.Token);
        products = result.Items;
        totalProducts = result.TotalCount;

        isLoadingProducts = false;
    }

    private void CreateProduct()
    {
        navigationManager.NavigateTo("/editproduct");
    }

    private void EditProduct(string reference)
    {
        navigationManager.NavigateTo($"/editproduct/{reference}");
    }

    private async Task ConfirmDeleteProduct(string reference)
    {
	    bool? confirmed = await DialogService.Confirm(Localizer["delete_customer_confirmation"],
		    Localizer["delete_confirmation"],
		    new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

	    if (confirmed == true)
	    {
		    await productService.DeleteAsync(currentProductRefeToDelete, cancellationTokenSource.Token);
		    toastService.Notify(new(ToastType.Warning, $"{Localizer["customer"]} {Localizer["deleted_with_success"]}"));
		    await productGrid.Reload();
	    }

    }

    void OnRowRender(RowRenderEventArgs<ProductResponse> args)
    {
	    if (args.Data.Qte < args.Data.QteLimit)
	    {
            args.Attributes.Add("style", "font-weight:bold; background-color:#28a745");

	    }
    }

    public void Dispose()
	    {
	        cancellationTokenSource.Cancel();
	        cancellationTokenSource.Dispose();
	    }
}