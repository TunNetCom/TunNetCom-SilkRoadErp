trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    codeCoverageEnabled: true
    runSettingsFile: 'test.runsettings'
    resultsFolder: '$(System.DefaultWorkingDirectory)/TestResults'

- task: PowerShell@2
  displayName: 'Convert Coverage to Cobertura'
  inputs:
    targetType: 'inline'
    script: |
      # Install ReportGenerator
      dotnet tool install -g dotnet-reportgenerator-globaltool
      # Find the .coverage file
      $coverageFile = Get-ChildItem -Path "$(System.DefaultWorkingDirectory)/TestResults" -Recurse -Include "*.coverage" | Select-Object -First 1
      if ($coverageFile) {
        # Convert .coverage to Cobertura and generate HTML report
        reportgenerator -reports:$coverageFile.FullName -targetdir:"$(System.DefaultWorkingDirectory)/TestResults/CoverageReport" -reporttypes:"Cobertura;Html"
        Write-Host "Coverage report generated at $(System.DefaultWorkingDirectory)/TestResults/CoverageReport"
      } else {
        Write-Error "No .coverage file found in TestResults."
      }

- task: PublishCodeCoverageResults@2
  inputs:
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/TestResults/CoverageReport/Cobertura.xml'
    failIfCoverageEmpty: false

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/TestResults/CoverageReport'
    artifactName: 'CodeCoverageReport'
    publishLocation: 'Container'